@page "/machine/{MachineId}/parts"
@using Microsoft.AspNetCore.Components
@using System.Collections.Generic
@using System.Linq

<PageTitle>個体部品一覧</PageTitle>

<div class="card mb-3">
    <div class="card-header bg-primary text-white">
        <h5 class="mb-0">機械情報</h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-3">
                <div class="mb-2">
                    <label class="text-muted small">製造番号</label>
                    <div class="fw-bold">@MachineId</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="mb-2">
                    <label class="text-muted small">型式</label>
                    <div class="fw-bold">WTD-T16I</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="mb-2">
                    <label class="text-muted small">機種名</label>
                    <div class="fw-bold">トルネードT16αR</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="mb-2">
                    <label class="text-muted small">完成日</label>
                    <div class="fw-bold">2024-09-17</div>
                </div>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-3">
                <div class="mb-2">
                    <label class="text-muted small">現在地</label>
                    <div class="fw-bold">本社倉庫</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="mb-2">
                    <label class="text-muted small">機械状態</label>
                    <div class="fw-bold">完成</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="mb-2">
                    <label class="text-muted small">管理区分</label>
                    <div class="fw-bold">新品</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="mb-2">
                    <label class="text-muted small">案件番号</label>
                    <div class="fw-bold">A-2024-0892</div>
                </div>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-3">
                <div class="mb-2">
                    <label class="text-muted small">ロット番号</label>
                    <div class="fw-bold">L2024-09</div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="mb-3 d-flex align-items-center">
    <span class="me-3">個体部品一覧</span>
    <div class="border rounded p-2">
        <label class="mb-0"><input type="radio" name="viewMode" value="normal" checked @onchange="@(() => viewMode = "normal")" /> 通常</label>
        <label class="mb-0 ms-3"><input type="radio" name="viewMode" value="hierarchy" @onchange="@(() => viewMode = "hierarchy")" /> 階層表示</label>
        <label class="mb-0 ms-3"><input type="radio" name="viewMode" value="expand" @onchange="@(() => viewMode = "expand")" /> 部品展開</label>
    </div>
    <button class="btn btn-secondary btn-sm ms-3" @onclick="TogglePartsDisplay">部品表示</button>
    <button class="btn btn-primary btn-sm ms-5" @onclick="@(() => NavTo($"/machine/{MachineId}/partsfetch"))">部品情報取得画面を開く</button>
    <button class="btn btn-primary btn-sm ms-2" @onclick="@(() => NavTo($"/machine/{MachineId}/setedit"))">セット品登録編集画面を開く</button>
    <button class="btn btn-primary btn-sm ms-2" @onclick="@(() => Nav.NavigateTo($"/machine/{MachineId}"))">閉じる</button>
</div>

@if (showParts)
{
    <table class="table table-bordered table-hover">
        <thead class="table-light">
            <tr>
                @if (viewMode == "hierarchy")
                {
                    <th style="width: 30px;"></th>
                }
                <th>品番</th>
                <th>品名</th>
                <th>数量</th>
                <th>単位</th>
                <th>メーカー</th>
                <th>材質</th>
                <th>型式</th>
                <th>仕様</th>
                <th>備考</th>
                @if (viewMode == "normal")
                {
                    <th style="width: 100px;">操作</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (viewMode == "normal")
            {
                @foreach (var part in GetNormalParts())
                {
                    <tr>
                        <td>@part.PartNumber</td>
                        <td>@part.PartName</td>
                        <td class="text-end">@part.Quantity</td>
                        <td>@part.Unit</td>
                        <td>@part.Manufacturer</td>
                        <td>@part.Material</td>
                        <td>@part.Model</td>
                        <td>@part.Specification</td>
                        <td>@part.Remarks</td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ChangePart(part)">部品変更</button>
                        </td>
                    </tr>
                }
            }
            else if (viewMode == "hierarchy")
            {
                @foreach (var part in GetHierarchicalParts())
                {
                    <tr>
                        <td>
                            @if (part.HasChildren)
                            {
                                <button class="btn btn-sm btn-link p-0" @onclick="() => ToggleExpand(part.PartNumber)">
                                    @if (expandedParts.Contains(part.PartNumber))
                                    {
                                        <i class="bi bi-chevron-down"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-chevron-right"></i>
                                    }
                                </button>
                            }
                        </td>
                        <td style="padding-left: @(part.Level * 20 + 8)px;">@part.PartNumber</td>
                        <td>@part.PartName</td>
                        <td class="text-end">@part.Quantity</td>
                        <td>@part.Unit</td>
                        <td>@part.Manufacturer</td>
                        <td>@part.Material</td>
                        <td>@part.Model</td>
                        <td>@part.Specification</td>
                        <td>@part.Remarks</td>
                    </tr>
                }
            }
            else if (viewMode == "expand")
            {
                @foreach (var part in GetExpandedParts())
                {
                    <tr>
                        <td>@part.PartNumber</td>
                        <td>@part.PartName</td>
                        <td class="text-end">@part.Quantity</td>
                        <td>@part.Unit</td>
                        <td>@part.Manufacturer</td>
                        <td>@part.Material</td>
                        <td>@part.Model</td>
                        <td>@part.Specification</td>
                        <td>@part.Remarks</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}


@code {
    [Parameter] public string? MachineId { get; set; }
    [Inject] NavigationManager Nav { get; set; } = default!;
    
    private bool showParts = false;
    private string viewMode = "normal";
    private HashSet<string> expandedParts = new HashSet<string>();
    
    public class Part
    {
        public string PartNumber { get; set; } = "";
        public string PartName { get; set; } = "";
        public int Quantity { get; set; }
        public string Unit { get; set; } = "個";
        public string Manufacturer { get; set; } = "";
        public string Material { get; set; } = "";
        public string Model { get; set; } = "";
        public string Specification { get; set; } = "";
        public string Remarks { get; set; } = "";
        public bool HasChildren { get; set; }
        public int Level { get; set; }
        public string ParentPartNumber { get; set; } = "";
        public List<Part> Children { get; set; } = new List<Part>();
    }
    
    private List<Part> allParts = new List<Part>
    {
        new Part { PartNumber = "MS-12345", PartName = "サーボモーター", Quantity = 2, Manufacturer = "三菱電機", Material = "アルミニウム合金", Model = "HG-KR43B", Specification = "400W", Remarks = "高精度位置決め用" },
        new Part { PartNumber = "BT-5678", PartName = "タイミングベルト", Quantity = 3, Manufacturer = "ゲイツ", Material = "ゴム（EPDM）", Model = "8M-1000-20", Specification = "歯数125", Remarks = "定期交換推奨" },
        new Part { PartNumber = "PS-9012", PartName = "近接センサー", Quantity = 4, Manufacturer = "オムロン", Material = "ステンレス（SUS304）", Model = "E2E-X5ME1", Specification = "検出距離5mm", Remarks = "" },
        new Part { PartNumber = "CY-3456", PartName = "エアシリンダー", Quantity = 1, Manufacturer = "SMC", Material = "アルミニウム", Model = "CDQ2B40-30DZ", Specification = "φ40×30", Remarks = "複動式、磁石付き" },
        new Part { PartNumber = "VL-7890", PartName = "電磁弁", Quantity = 2, Manufacturer = "CKD", Material = "真鍮", Model = "4GD210-08", Specification = "5ポート2位置", Remarks = "DC24V仕様" },
        new Part { PartNumber = "SET-001", PartName = "駆動ユニット", Quantity = 1, Unit = "式", Manufacturer = "自社", Material = "-", Model = "DRV-UNIT-01", Specification = "組立品", Remarks = "サーボモーター含む", HasChildren = true },
        new Part { PartNumber = "BR-2345", PartName = "ブラケット", Quantity = 4, Manufacturer = "自社", Material = "SS400", Model = "BRK-100", Specification = "t=6mm", Remarks = "", ParentPartNumber = "SET-001" },
        new Part { PartNumber = "SC-5678", PartName = "M6ボルト", Quantity = 16, Manufacturer = "ミスミ", Material = "SUS304", Model = "HXNB6-20", Specification = "M6×20", Remarks = "", ParentPartNumber = "SET-001" },
        new Part { PartNumber = "SET-002", PartName = "センサーユニット", Quantity = 1, Unit = "式", Manufacturer = "自社", Material = "-", Model = "SEN-UNIT-01", Specification = "組立品", Remarks = "近接センサー4個含む", HasChildren = true },
        new Part { PartNumber = "CB-1234", PartName = "ケーブル", Quantity = 4, Unit = "本", Manufacturer = "オムロン", Material = "PVC", Model = "XS3F-M421-402-A", Specification = "2m", Remarks = "", ParentPartNumber = "SET-002" }
    };
    
    void NavTo(string url) => Nav.NavigateTo(url);
    
    void TogglePartsDisplay()
    {
        showParts = !showParts;
    }
    
    void ToggleExpand(string partNumber)
    {
        if (expandedParts.Contains(partNumber))
            expandedParts.Remove(partNumber);
        else
            expandedParts.Add(partNumber);
    }
    
    List<Part> GetNormalParts()
    {
        return allParts.Where(p => string.IsNullOrEmpty(p.ParentPartNumber)).ToList();
    }
    
    List<Part> GetHierarchicalParts()
    {
        var result = new List<Part>();
        var rootParts = allParts.Where(p => string.IsNullOrEmpty(p.ParentPartNumber)).ToList();
        
        foreach (var part in rootParts)
        {
            AddPartWithChildren(result, part, 0);
        }
        
        return result;
    }
    
    void AddPartWithChildren(List<Part> result, Part part, int level)
    {
        part.Level = level;
        result.Add(part);
        
        if (part.HasChildren && expandedParts.Contains(part.PartNumber))
        {
            var children = allParts.Where(p => p.ParentPartNumber == part.PartNumber).ToList();
            foreach (var child in children)
            {
                AddPartWithChildren(result, child, level + 1);
            }
        }
    }
    
    List<Part> GetExpandedParts()
    {
        var result = new Dictionary<string, Part>();
        var rootParts = allParts.Where(p => string.IsNullOrEmpty(p.ParentPartNumber)).ToList();
        
        foreach (var part in rootParts)
        {
            if (part.HasChildren)
            {
                var children = allParts.Where(p => p.ParentPartNumber == part.PartNumber).ToList();
                foreach (var child in children)
                {
                    if (result.ContainsKey(child.PartNumber))
                    {
                        result[child.PartNumber].Quantity += child.Quantity * part.Quantity;
                    }
                    else
                    {
                        var expandedPart = new Part
                        {
                            PartNumber = child.PartNumber,
                            PartName = child.PartName,
                            Quantity = child.Quantity * part.Quantity,
                            Unit = child.Unit,
                            Manufacturer = child.Manufacturer,
                            Material = child.Material,
                            Model = child.Model,
                            Specification = child.Specification,
                            Remarks = child.Remarks
                        };
                        result[child.PartNumber] = expandedPart;
                    }
                }
            }
            else
            {
                if (result.ContainsKey(part.PartNumber))
                {
                    result[part.PartNumber].Quantity += part.Quantity;
                }
                else
                {
                    result[part.PartNumber] = part;
                }
            }
        }
        
        return result.Values.OrderBy(p => p.PartNumber).ToList();
    }
    
    void ChangePart(Part part)
    {
        NavTo($"/machine/{MachineId}/partschange");
    }
    
    void DeletePart(Part part)
    {
        // 削除機能は後で実装
    }
} 