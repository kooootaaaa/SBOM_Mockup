@page "/machine/{MachineId}/parts"
@using Microsoft.AspNetCore.Components
@using System.Collections.Generic
@using System.Linq
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>個体部品一覧</PageTitle>

<style>
    .compact-info {
        margin-bottom: 0.5rem;
    }
    
    .info-label {
        font-weight: 600;
        color: #495057;
        font-size: 0.8rem;
        margin-bottom: 0.125rem;
    }
    
    .info-value {
        font-weight: 600;
        color: #212529;
        font-size: 0.9rem;
    }
    
    .option-group {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 6px;
        padding: 0.75rem;
    }
    
    .btn-compact {
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
    }
</style>

<!-- Header Section -->
<div class="mb-2 pb-2 border-bottom border-2">
    <h1 class="h3 mb-0 text-primary fw-bold">個体部品一覧 <small class="text-muted fs-6">（画面No.3 - PartsList.razor）</small></h1>
</div>

@if (isLoading)
{
    <div class="text-center p-4">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">読み込み中...</span>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-warning">
        @errorMessage
    </div>
}

<div class="card shadow-sm mb-3">
    <div class="card-header bg-light border-0 py-2">
        <h6 class="mb-0 text-secondary fw-semibold small">機械情報</h6>
    </div>
    <div class="card-body py-3">
        <div class="row g-2">
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">製造番号</label>
                    <div class="info-value">@(serialNumber ?? MachineId)</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">型式</label>
                    <div class="info-value">@(model ?? "")</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="compact-info">
                    <label class="info-label">機種名</label>
                    <div class="info-value">@(typeName ?? "")</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">完成日</label>
                    <div class="info-value">@(completionDate ?? "")</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">現在地</label>
                    <div class="info-value">@(location ?? "")</div>
                </div>
            </div>
            <div class="col-md-1">
                <div class="compact-info">
                    <label class="info-label">機械状態</label>
                    <div class="info-value">@(status ?? "")</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">管理区分</label>
                    <div class="info-value">@(managementType ?? "")</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">案件番号</label>
                    <div class="info-value">@(projectNo ?? "")</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">ロット番号</label>
                    <div class="info-value">@(lotNo ?? "")</div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="card shadow-sm mb-3">
    <div class="card-header bg-light border-0 py-2">
        <h6 class="mb-0 text-secondary fw-semibold small">
            <i class="bi bi-list-ul me-1"></i>個体部品一覧
        </h6>
    </div>
    <div class="card-body py-3">
        <div class="d-flex align-items-center flex-wrap gap-3">
            <div class="option-group">
                <label class="mb-0"><input type="radio" name="viewMode" value="normal" checked @onchange="@(() => viewMode = "normal")" /> 通常</label>
                <label class="mb-0 ms-3"><input type="radio" name="viewMode" value="hierarchy" @onchange="@(() => viewMode = "hierarchy")" /> 階層表示</label>
                <label class="mb-0 ms-3"><input type="radio" name="viewMode" value="expand" @onchange="@(() => viewMode = "expand")" /> 部品展開</label>
            </div>
            <button class="btn btn-outline-secondary btn-compact" @onclick="TogglePartsDisplay">部品表示</button>
            <button class="btn btn-primary btn-compact" @onclick="@(() => NavTo($"/machine/{MachineId}/partsfetch"))">部品情報取得画面を開く</button>
            <button class="btn btn-primary btn-compact" @onclick="@(() => NavTo($"/machine/{MachineId}/setedit"))">セット品登録編集画面を開く</button>
            <button class="btn btn-secondary btn-compact" @onclick="@(() => Nav.NavigateTo($"/machine/{MachineId}"))">閉じる</button>
        </div>
    </div>
</div>

@if (showParts)
{
    <div class="card shadow-sm">
        <div class="table-responsive">
            <table class="table table-hover table-sm mb-0">
            <thead class="table-light">
            <tr>
                @if (viewMode == "hierarchy")
                {
                    <th style="width: 30px;"></th>
                }
                <th class="border-0 py-2 text-muted small fw-semibold">品番</th>
                <th class="border-0 py-2 text-muted small fw-semibold">品名</th>
                <th class="border-0 py-2 text-muted small fw-semibold">数量</th>
                <th class="border-0 py-2 text-muted small fw-semibold">単位</th>
                <th class="border-0 py-2 text-muted small fw-semibold">メーカー</th>
                <th class="border-0 py-2 text-muted small fw-semibold">材質</th>
                <th class="border-0 py-2 text-muted small fw-semibold">型式</th>
                <th class="border-0 py-2 text-muted small fw-semibold">仕様</th>
                <th class="border-0 py-2 text-muted small fw-semibold">備考</th>
                @if (viewMode == "normal")
                {
                    <th class="border-0 py-2 text-muted small fw-semibold text-center" style="width: 100px;">操作</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (viewMode == "normal")
            {
                @foreach (var part in GetNormalParts())
                {
                    <tr class="border-bottom">
                        <td class="py-1 align-middle small">@part.PartNumber</td>
                        <td class="py-1 align-middle small">@part.PartName</td>
                        <td class="py-1 align-middle text-end small">@part.Quantity</td>
                        <td class="py-1 align-middle small">@part.Unit</td>
                        <td class="py-1 align-middle small">@part.Manufacturer</td>
                        <td class="py-1 align-middle small">@part.Material</td>
                        <td class="py-1 align-middle small">@part.Model</td>
                        <td class="py-1 align-middle small">@part.Specification</td>
                        <td class="py-1 align-middle small">@part.Remarks</td>
                        <td class="py-1 align-middle text-center">
                            <button class="btn btn-outline-primary btn-sm px-2 py-1" @onclick="() => ChangePart(part)">
                                <i class="bi bi-pencil me-1"></i>変更
                            </button>
                        </td>
                    </tr>
                }
            }
            else if (viewMode == "hierarchy")
            {
                @foreach (var part in GetHierarchicalParts())
                {
                    <tr class="border-bottom">
                        <td class="py-1 align-middle">
                            @if (part.HasChildren)
                            {
                                <button class="btn btn-sm btn-link p-0" @onclick="() => ToggleExpand(part.PartNumber)">
                                    @if (expandedParts.Contains(part.PartNumber))
                                    {
                                        <i class="bi bi-chevron-down"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-chevron-right"></i>
                                    }
                                </button>
                            }
                        </td>
                        <td class="py-1 align-middle small" style="padding-left: @(part.Level * 20 + 8)px;">@part.PartNumber</td>
                        <td class="py-1 align-middle small">@part.PartName</td>
                        <td class="py-1 align-middle text-end small">@part.Quantity</td>
                        <td class="py-1 align-middle small">@part.Unit</td>
                        <td class="py-1 align-middle small">@part.Manufacturer</td>
                        <td class="py-1 align-middle small">@part.Material</td>
                        <td class="py-1 align-middle small">@part.Model</td>
                        <td class="py-1 align-middle small">@part.Specification</td>
                        <td class="py-1 align-middle small">@part.Remarks</td>
                    </tr>
                }
            }
            else if (viewMode == "expand")
            {
                @foreach (var part in GetExpandedParts())
                {
                    <tr class="border-bottom">
                        <td class="py-1 align-middle small">@part.PartNumber</td>
                        <td class="py-1 align-middle small">@part.PartName</td>
                        <td class="py-1 align-middle text-end small">@part.Quantity</td>
                        <td class="py-1 align-middle small">@part.Unit</td>
                        <td class="py-1 align-middle small">@part.Manufacturer</td>
                        <td class="py-1 align-middle small">@part.Material</td>
                        <td class="py-1 align-middle small">@part.Model</td>
                        <td class="py-1 align-middle small">@part.Specification</td>
                        <td class="py-1 align-middle small">@part.Remarks</td>
                    </tr>
                }
            }
            </tbody>
            </table>
        </div>
    </div>
}


@code {
    [Parameter] public string? MachineId { get; set; }
    [Inject] NavigationManager Nav { get; set; } = default!;
    
    private bool showParts = false;
    private string viewMode = "normal";
    private HashSet<string> expandedParts = new HashSet<string>();
    
    // 機械情報を保持する変数
    private string? serialNumber;  // 製造番号
    private string? model;
    private string? typeName;
    private string? completionDate;
    private string? location;
    private string? status;
    private string? managementType;
    private string? projectNo;
    private string? lotNo;
    
    private string apiBaseUrl = "http://localhost:5196/api";
    private bool isLoading = false;
    private string errorMessage = "";
    
    protected override async Task OnInitializedAsync()
    {
        // URLからクエリパラメータを取得
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = uri.Query;
        
        bool hasQueryParams = false;
        if (!string.IsNullOrEmpty(query))
        {
            var queryParams = ParseQueryString(query);
            
            serialNumber = GetQueryValue(queryParams, "serialno");
            model = GetQueryValue(queryParams, "model");
            typeName = GetQueryValue(queryParams, "typename");
            completionDate = GetQueryValue(queryParams, "completion");
            location = GetQueryValue(queryParams, "location");
            status = GetQueryValue(queryParams, "status");
            managementType = GetQueryValue(queryParams, "management");
            projectNo = GetQueryValue(queryParams, "projectno");
            lotNo = GetQueryValue(queryParams, "lotno");
            
            hasQueryParams = !string.IsNullOrEmpty(model) || !string.IsNullOrEmpty(typeName);
        }
        
        // URLパラメータがない場合はAPIから機械情報を取得
        if (!hasQueryParams && !string.IsNullOrEmpty(MachineId))
        {
            await LoadMachineDataFromApi();
        }
    }
    
    private Dictionary<string, string> ParseQueryString(string query)
    {
        var result = new Dictionary<string, string>();
        if (query.StartsWith("?"))
        {
            query = query.Substring(1);
        }
        
        var pairs = query.Split('&');
        foreach (var pair in pairs)
        {
            var keyValue = pair.Split('=');
            if (keyValue.Length == 2)
            {
                result[keyValue[0]] = keyValue[1];
            }
        }
        return result;
    }
    
    private string? GetQueryValue(Dictionary<string, string> queryParams, string key)
    {
        if (queryParams.TryGetValue(key, out var value))
        {
            return Uri.UnescapeDataString(value);
        }
        return null;
    }
    
    private async Task LoadMachineDataFromApi()
    {
        try
        {
            isLoading = true;
            var response = await Http.GetAsync($"{apiBaseUrl}/Machine/{MachineId}");
            
            if (response.IsSuccessStatusCode)
            {
                var jsonContent = await response.Content.ReadAsStringAsync();
                var data = JsonSerializer.Deserialize<Dictionary<string, object>>(jsonContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                if (data != null)
                {
                    serialNumber = GetStringValueFromApi(data, "製造番号");
                    model = GetStringValueFromApi(data, "型式");
                    typeName = GetStringValueFromApi(data, "機種名");
                    completionDate = GetDateValueFromApi(data, "完成日");
                    location = GetStringValueFromApi(data, "現所在地") ?? GetStringValueFromApi(data, "現在地");
                    status = GetStringValueFromApi(data, "機械状態");
                    managementType = GetStringValueFromApi(data, "管理区分");
                    projectNo = GetStringValueFromApi(data, "案件番号");
                    lotNo = GetStringValueFromApi(data, "ロット番号");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"APIエラー: {response.StatusCode}";
                Console.WriteLine($"APIエラー: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"データ取得エラー: {ex.Message}";
            Console.WriteLine($"データ取得エラー: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private string GetStringValueFromApi(Dictionary<string, object> data, string key)
    {
        if (data.TryGetValue(key, out var value))
        {
            return value?.ToString() ?? "";
        }
        return "";
    }
    
    private string? GetDateValueFromApi(Dictionary<string, object> data, string key)
    {
        if (data.TryGetValue(key, out var value) && value != null)
        {
            if (value is JsonElement element && element.ValueKind != JsonValueKind.Null)
            {
                if (DateTime.TryParse(element.GetString(), out DateTime date))
                {
                    return date.ToString("yyyy-MM-dd");
                }
            }
            if (DateTime.TryParse(value.ToString(), out DateTime parsedDate))
            {
                return parsedDate.ToString("yyyy-MM-dd");
            }
        }
        return null;
    }
    
    public class Part
    {
        public string PartNumber { get; set; } = "";
        public string PartName { get; set; } = "";
        public int Quantity { get; set; }
        public string Unit { get; set; } = "個";
        public string Manufacturer { get; set; } = "";
        public string Material { get; set; } = "";
        public string Model { get; set; } = "";
        public string Specification { get; set; } = "";
        public string Remarks { get; set; } = "";
        public bool HasChildren { get; set; }
        public int Level { get; set; }
        public string ParentPartNumber { get; set; } = "";
        public List<Part> Children { get; set; } = new List<Part>();
    }
    
    private List<Part> allParts = new List<Part>
    {
        new Part { PartNumber = "MS-12345", PartName = "サーボモーター", Quantity = 2, Manufacturer = "三菱電機", Material = "アルミニウム合金", Model = "HG-KR43B", Specification = "400W", Remarks = "高精度位置決め用" },
        new Part { PartNumber = "BT-5678", PartName = "タイミングベルト", Quantity = 3, Manufacturer = "ゲイツ", Material = "ゴム（EPDM）", Model = "8M-1000-20", Specification = "歯数125", Remarks = "定期交換推奨" },
        new Part { PartNumber = "PS-9012", PartName = "近接センサー", Quantity = 4, Manufacturer = "オムロン", Material = "ステンレス（SUS304）", Model = "E2E-X5ME1", Specification = "検出距離5mm", Remarks = "" },
        new Part { PartNumber = "CY-3456", PartName = "エアシリンダー", Quantity = 1, Manufacturer = "SMC", Material = "アルミニウム", Model = "CDQ2B40-30DZ", Specification = "φ40×30", Remarks = "複動式、磁石付き" },
        new Part { PartNumber = "VL-7890", PartName = "電磁弁", Quantity = 2, Manufacturer = "CKD", Material = "真鍮", Model = "4GD210-08", Specification = "5ポート2位置", Remarks = "DC24V仕様" },
        new Part { PartNumber = "SET-001", PartName = "駆動ユニット", Quantity = 1, Unit = "式", Manufacturer = "自社", Material = "-", Model = "DRV-UNIT-01", Specification = "組立品", Remarks = "サーボモーター含む", HasChildren = true },
        new Part { PartNumber = "BR-2345", PartName = "ブラケット", Quantity = 4, Manufacturer = "自社", Material = "SS400", Model = "BRK-100", Specification = "t=6mm", Remarks = "", ParentPartNumber = "SET-001" },
        new Part { PartNumber = "SC-5678", PartName = "M6ボルト", Quantity = 16, Manufacturer = "ミスミ", Material = "SUS304", Model = "HXNB6-20", Specification = "M6×20", Remarks = "", ParentPartNumber = "SET-001" },
        new Part { PartNumber = "SET-002", PartName = "センサーユニット", Quantity = 1, Unit = "式", Manufacturer = "自社", Material = "-", Model = "SEN-UNIT-01", Specification = "組立品", Remarks = "近接センサー4個含む", HasChildren = true },
        new Part { PartNumber = "CB-1234", PartName = "ケーブル", Quantity = 4, Unit = "本", Manufacturer = "オムロン", Material = "PVC", Model = "XS3F-M421-402-A", Specification = "2m", Remarks = "", ParentPartNumber = "SET-002" }
    };
    
    void NavTo(string url) => Nav.NavigateTo(url);
    
    void TogglePartsDisplay()
    {
        showParts = !showParts;
    }
    
    void ToggleExpand(string partNumber)
    {
        if (expandedParts.Contains(partNumber))
            expandedParts.Remove(partNumber);
        else
            expandedParts.Add(partNumber);
    }
    
    List<Part> GetNormalParts()
    {
        return allParts.Where(p => string.IsNullOrEmpty(p.ParentPartNumber)).ToList();
    }
    
    List<Part> GetHierarchicalParts()
    {
        var result = new List<Part>();
        var rootParts = allParts.Where(p => string.IsNullOrEmpty(p.ParentPartNumber)).ToList();
        
        foreach (var part in rootParts)
        {
            AddPartWithChildren(result, part, 0);
        }
        
        return result;
    }
    
    void AddPartWithChildren(List<Part> result, Part part, int level)
    {
        part.Level = level;
        result.Add(part);
        
        if (part.HasChildren && expandedParts.Contains(part.PartNumber))
        {
            var children = allParts.Where(p => p.ParentPartNumber == part.PartNumber).ToList();
            foreach (var child in children)
            {
                AddPartWithChildren(result, child, level + 1);
            }
        }
    }
    
    List<Part> GetExpandedParts()
    {
        var result = new Dictionary<string, Part>();
        var rootParts = allParts.Where(p => string.IsNullOrEmpty(p.ParentPartNumber)).ToList();
        
        foreach (var part in rootParts)
        {
            if (part.HasChildren)
            {
                var children = allParts.Where(p => p.ParentPartNumber == part.PartNumber).ToList();
                foreach (var child in children)
                {
                    if (result.ContainsKey(child.PartNumber))
                    {
                        result[child.PartNumber].Quantity += child.Quantity * part.Quantity;
                    }
                    else
                    {
                        var expandedPart = new Part
                        {
                            PartNumber = child.PartNumber,
                            PartName = child.PartName,
                            Quantity = child.Quantity * part.Quantity,
                            Unit = child.Unit,
                            Manufacturer = child.Manufacturer,
                            Material = child.Material,
                            Model = child.Model,
                            Specification = child.Specification,
                            Remarks = child.Remarks
                        };
                        result[child.PartNumber] = expandedPart;
                    }
                }
            }
            else
            {
                if (result.ContainsKey(part.PartNumber))
                {
                    result[part.PartNumber].Quantity += part.Quantity;
                }
                else
                {
                    result[part.PartNumber] = part;
                }
            }
        }
        
        return result.Values.OrderBy(p => p.PartNumber).ToList();
    }
    
    void ChangePart(Part part)
    {
        NavTo($"/machine/{MachineId}/partschange");
    }
    
    void DeletePart(Part part)
    {
        // 削除機能は後で実装
    }
} 