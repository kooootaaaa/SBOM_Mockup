@page "/machine/{MachineId}/parts"
@using Microsoft.AspNetCore.Components
@using System.Collections.Generic
@using System.Linq
@using System.Text.Json
@using SBOMSystemMockup.Models
@using SBOMSystemMockup.Components
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>個体部品一覧</PageTitle>

<style>
    .compact-info {
        margin-bottom: 0.5rem;
    }
    
    .info-label {
        font-weight: 600;
        color: #495057;
        font-size: 0.8rem;
        margin-bottom: 0.125rem;
    }
    
    .info-value {
        font-weight: 600;
        color: #212529;
        font-size: 0.9rem;
    }
    
    .option-group {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 6px;
        padding: 0.75rem;
    }
    
    .btn-compact {
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
    }
    
    .btn-modern-primary {
        background: #0d6efd;
        border: 1px solid #0d6efd;
        color: white;
        border-radius: 4px;
        padding: 0.5rem 1rem;
        font-weight: 600;
        transition: all 0.2s ease;
    }
    
    .btn-modern-primary:hover {
        background: #0b5ed7;
        border-color: #0a58ca;
        color: white;
    }
    
    .btn-modern-secondary {
        background: #6c757d;
        border: 1px solid #6c757d;
        color: white;
        border-radius: 4px;
        padding: 0.5rem 1rem;
        font-weight: 600;
        transition: all 0.2s ease;
    }
    
    .btn-modern-secondary:hover {
        background: #5c636a;
        border-color: #565e64;
        color: white;
    }
</style>

<!-- Header Section -->
<div class="mb-2 pb-2 border-bottom border-2">
    <h1 class="h3 mb-0 text-primary fw-bold">個体部品一覧 <small class="text-muted fs-6">（画面No.3 - PartsList.razor）</small></h1>
</div>

@if (isLoading)
{
    <div class="text-center p-4">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">読み込み中...</span>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-warning">
        @errorMessage
    </div>
}

<div class="card shadow-sm mb-3">
    <div class="card-header bg-light border-0 py-2">
        <h6 class="mb-0 text-secondary fw-semibold small">機械情報</h6>
    </div>
    <div class="card-body py-3">
        <div class="row g-2">
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">製造番号</label>
                    <div class="info-value">@(serialNumber ?? MachineId)</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">型式</label>
                    <div class="info-value">@(model ?? "")</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="compact-info">
                    <label class="info-label">機種名</label>
                    <div class="info-value">@(typeName ?? "")</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">完成日</label>
                    <div class="info-value">@(completionDate ?? "")</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">現在地</label>
                    <div class="info-value">@(location ?? "")</div>
                </div>
            </div>
            <div class="col-md-1">
                <div class="compact-info">
                    <label class="info-label">機械状態</label>
                    <div class="info-value">@(status ?? "")</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">管理区分</label>
                    <div class="info-value">@(managementType ?? "")</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">案件番号</label>
                    <div class="info-value">@(projectNo ?? "")</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">ロット番号</label>
                    <div class="info-value">@(lotNo ?? "")</div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="card shadow-sm mb-3">
    <div class="card-header bg-light border-0 py-2">
        <h6 class="mb-0 text-secondary fw-semibold small">
            <i class="bi bi-list-ul me-1"></i>個体部品一覧
        </h6>
    </div>
    <div class="card-body py-3">
        <div class="d-flex align-items-center flex-wrap gap-3">
            <div class="option-group">
                <label class="mb-0"><input type="radio" name="viewMode" value="hierarchy" checked @onchange="@(() => ChangeDisplayMode(PartsDisplayMode.Hierarchy))" /> 階層表示</label>
                <label class="mb-0 ms-3"><input type="radio" name="viewMode" value="summary" @onchange="@(() => ChangeDisplayMode(PartsDisplayMode.Summary))" /> 集計表示</label>
            </div>
            <button class="btn btn-success btn-compact" @onclick="TogglePartsDisplay">部品表示</button>
            <button class="btn btn-modern-primary btn-compact" @onclick="@(() => NavTo($"/machine/{MachineId}/partsfetch"))">部品情報取得画面を開く</button>
            <button class="btn btn-modern-primary btn-compact" @onclick="@(() => NavTo($"/machine/{MachineId}/partschange"))">部品変更画面を開く</button>
            <button class="btn btn-modern-primary btn-compact" @onclick="@(() => NavTo($"/machine/{MachineId}/setedit"))">セット品登録編集画面を開く</button>
            <button class="btn btn-modern-secondary btn-compact" @onclick="@(() => Nav.NavigateTo($"/machine/{MachineId}"))">閉じる</button>
        </div>
    </div>
</div>

@if (showParts)
{
    @if (currentDisplayMode == PartsDisplayMode.Hierarchy)
    {
        <PartsTreeView 
            Parts="hierarchyParts" 
            IsLoading="isPartsLoading"
            ShowActions="false"
            OnRefresh="LoadPartsData"
            OnLoadChildren="LoadChildParts" />
    }
    else if (currentDisplayMode == PartsDisplayMode.Summary)
    {
        <PartsSummaryView 
            SummaryParts="summaryParts" 
            IsLoading="isPartsLoading"
            ShowActions="false"
            OnRefresh="LoadPartsData" />
    }
}


@code {
    [Parameter] public string? MachineId { get; set; }
    [Inject] NavigationManager Nav { get; set; } = default!;
    
    private bool showParts = false;
    private PartsDisplayMode currentDisplayMode = PartsDisplayMode.Hierarchy;
    
    // 新しいデータモデル
    private List<PartNode> hierarchyParts = new List<PartNode>();
    private List<PartSummary> summaryParts = new List<PartSummary>();
    private bool isPartsLoading = false;
    
    // 機械情報を保持する変数
    private string? serialNumber;  // 製造番号
    private string? model;
    private string? typeName;
    private string? completionDate;
    private string? location;
    private string? status;
    private string? managementType;
    private string? projectNo;
    private string? lotNo;
    
    private string apiBaseUrl = "http://localhost:5196/api";
    private bool isLoading = false;
    private string errorMessage = "";
    
    protected override async Task OnInitializedAsync()
    {
        // URLからクエリパラメータを取得
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = uri.Query;
        
        bool hasQueryParams = false;
        if (!string.IsNullOrEmpty(query))
        {
            var queryParams = ParseQueryString(query);
            
            serialNumber = GetQueryValue(queryParams, "serialno");
            model = GetQueryValue(queryParams, "model");
            typeName = GetQueryValue(queryParams, "typename");
            completionDate = GetQueryValue(queryParams, "completion");
            location = GetQueryValue(queryParams, "location");
            status = GetQueryValue(queryParams, "status");
            managementType = GetQueryValue(queryParams, "management");
            projectNo = GetQueryValue(queryParams, "projectno");
            lotNo = GetQueryValue(queryParams, "lotno");
            
            hasQueryParams = !string.IsNullOrEmpty(model) || !string.IsNullOrEmpty(typeName);
        }
        
        // URLパラメータがない場合はAPIから機械情報を取得
        if (!hasQueryParams && !string.IsNullOrEmpty(MachineId))
        {
            await LoadMachineDataFromApi();
        }
    }
    
    private Dictionary<string, string> ParseQueryString(string query)
    {
        var result = new Dictionary<string, string>();
        if (query.StartsWith("?"))
        {
            query = query.Substring(1);
        }
        
        var pairs = query.Split('&');
        foreach (var pair in pairs)
        {
            var keyValue = pair.Split('=');
            if (keyValue.Length == 2)
            {
                result[keyValue[0]] = keyValue[1];
            }
        }
        return result;
    }
    
    private string? GetQueryValue(Dictionary<string, string> queryParams, string key)
    {
        if (queryParams.TryGetValue(key, out var value))
        {
            return Uri.UnescapeDataString(value);
        }
        return null;
    }
    
    private async Task LoadMachineDataFromApi()
    {
        try
        {
            isLoading = true;
            var response = await Http.GetAsync($"{apiBaseUrl}/Machine/{MachineId}");
            
            if (response.IsSuccessStatusCode)
            {
                var jsonContent = await response.Content.ReadAsStringAsync();
                var data = JsonSerializer.Deserialize<Dictionary<string, object>>(jsonContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                if (data != null)
                {
                    serialNumber = GetStringValueFromApi(data, "製造番号");
                    model = GetStringValueFromApi(data, "型式");
                    typeName = GetStringValueFromApi(data, "機種名");
                    completionDate = GetDateValueFromApi(data, "完成日");
                    location = GetStringValueFromApi(data, "現所在地") ?? GetStringValueFromApi(data, "現在地");
                    status = GetStringValueFromApi(data, "機械状態");
                    managementType = GetStringValueFromApi(data, "管理区分");
                    projectNo = GetStringValueFromApi(data, "案件番号");
                    lotNo = GetStringValueFromApi(data, "ロット番号");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"APIエラー: {response.StatusCode}";
                Console.WriteLine($"APIエラー: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"データ取得エラー: {ex.Message}";
            Console.WriteLine($"データ取得エラー: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private string GetStringValueFromApi(Dictionary<string, object> data, string key)
    {
        if (data.TryGetValue(key, out var value))
        {
            return value?.ToString() ?? "";
        }
        return "";
    }
    
    private string? GetDateValueFromApi(Dictionary<string, object> data, string key)
    {
        if (data.TryGetValue(key, out var value) && value != null)
        {
            if (value is JsonElement element && element.ValueKind != JsonValueKind.Null)
            {
                if (DateTime.TryParse(element.GetString(), out DateTime date))
                {
                    return date.ToString("yyyy-MM-dd");
                }
            }
            if (DateTime.TryParse(value.ToString(), out DateTime parsedDate))
            {
                return parsedDate.ToString("yyyy-MM-dd");
            }
        }
        return null;
    }
    
    // 新しいメソッド群
    
    void NavTo(string url) => Nav.NavigateTo(url);
    
    void TogglePartsDisplay()
    {
        showParts = !showParts;
        if (showParts && hierarchyParts.Count == 0)
        {
            // 初回表示時にデータを読み込み
            _ = LoadPartsData();
        }
    }
    
    private async Task ChangeDisplayMode(PartsDisplayMode newMode)
    {
        if (currentDisplayMode != newMode)
        {
            currentDisplayMode = newMode;
            await LoadPartsData();
        }
    }
    
    private async Task LoadPartsData()
    {
        isPartsLoading = true;
        try
        {
            // APIから実データを読み込み
            await LoadPartsDataFromApi();
            
            // 階層表示の部品を品番順にソート
            hierarchyParts = hierarchyParts.OrderBy(p => p.PartNumber).ToList();
            SortChildrenRecursively(hierarchyParts);
            
            // 表示モードに応じて集計データを生成
            if (currentDisplayMode == PartsDisplayMode.Summary)
            {
                summaryParts = PartsTreeHelper.GenerateSummary(hierarchyParts);
                summaryParts = PartsTreeHelper.SortSummary(summaryParts, PartsSortMode.PartNumber);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"部品データ取得エラー: {ex.Message}";
            Console.WriteLine($"部品データ取得エラー: {ex.Message}");
        }
        finally
        {
            isPartsLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task LoadPartsDataFromApi()
    {
        try
        {
            if (string.IsNullOrEmpty(MachineId))
            {
                errorMessage = "機械IDが指定されていません。";
                return;
            }

            var response = await Http.GetAsync($"{apiBaseUrl}/Parts/individual/{MachineId}");
            
            if (response.IsSuccessStatusCode)
            {
                var jsonContent = await response.Content.ReadAsStringAsync();
                var apiResponse = JsonSerializer.Deserialize<Dictionary<string, object>>(jsonContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                if (apiResponse != null)
                {
                    await BuildHierarchyFromApiResponse(apiResponse);
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"APIエラー: {response.StatusCode} - {errorContent}";
                Console.WriteLine($"個体部品API呼び出しエラー: {errorContent}");
                
                // データが存在しない場合は空のリストを設定
                hierarchyParts = new List<PartNode>();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"個体部品データ取得エラー: {ex.Message}";
            Console.WriteLine($"個体部品データ取得エラー: {ex.Message}");
            hierarchyParts = new List<PartNode>();
        }
    }

    private async Task BuildHierarchyFromApiResponse(Dictionary<string, object> apiResponse)
    {
        await Task.Delay(100); // 処理時間のシミュレーション

        var partLookup = new Dictionary<string, PartNode>();
        var childRelations = new List<(string ParentId, string ChildId, int Quantity)>();

        // 1. 個体部品データからPartNodeを作成
        if (apiResponse.TryGetValue("parts", out var partsObj) && partsObj is JsonElement partsElement)
        {
            foreach (var partElement in partsElement.EnumerateArray())
            {
                var partNode = new PartNode
                {
                    PartId = GetStringFromJsonElement(partElement, "部品ID"),
                    PartNumber = GetStringFromJsonElement(partElement, "品番"),
                    PartName = GetStringFromJsonElement(partElement, "品名"),
                    Quantity = GetIntFromJsonElement(partElement, "個数"),
                    Unit = "", // 単位カラムは存在しない
                    Manufacturer = GetStringFromJsonElement(partElement, "メーカー"),
                    Material = GetStringFromJsonElement(partElement, "材質"),
                    Model = GetStringFromJsonElement(partElement, "型式"),
                    Specification = "", // 仕様カラムは存在しない
                    Remarks = GetStringFromJsonElement(partElement, "備考"),
                    Level = 0,
                    Children = new List<PartNode>(),
                    // 部品種別から判定
                    IsUnit = GetIntFromJsonElement(partElement, "ユニット種別") > 0,
                    IsOptionUnit = GetIntFromJsonElement(partElement, "オプションユニットFL") > 0
                };

                partLookup[partNode.PartId] = partNode;
            }
        }

        // 2. 子部品関係データから親子関係を構築
        if (apiResponse.TryGetValue("childRelations", out var childObj) && childObj is JsonElement childElement)
        {
            foreach (var relationElement in childElement.EnumerateArray())
            {
                var parentId = GetStringFromJsonElement(relationElement, "親部品コード");
                var childId = GetStringFromJsonElement(relationElement, "子部品コード");
                var quantity = GetIntFromJsonElement(relationElement, "個数");

                // 子部品がpartLookupに存在しない場合は作成
                if (!partLookup.ContainsKey(childId))
                {
                    var childNode = new PartNode
                    {
                        PartId = childId,
                        PartNumber = GetStringFromJsonElement(relationElement, "子品番"),
                        PartName = GetStringFromJsonElement(relationElement, "子品名"),
                        Quantity = quantity,
                        Unit = "", // 単位カラムは存在しない
                        Manufacturer = GetStringFromJsonElement(relationElement, "子メーカー"),
                        Material = GetStringFromJsonElement(relationElement, "子材質"),
                        Model = GetStringFromJsonElement(relationElement, "子型式"),
                        Specification = "", // 仕様カラムは存在しない
                        Remarks = GetStringFromJsonElement(relationElement, "子備考"),
                        Level = 1,
                        Children = new List<PartNode>(),
                        // 子部品種別から判定
                        IsUnit = GetIntFromJsonElement(relationElement, "子ユニット種別") > 0,
                        IsOptionUnit = GetIntFromJsonElement(relationElement, "子オプションユニットFL") > 0
                    };

                    partLookup[childId] = childNode;
                }

                childRelations.Add((parentId, childId, quantity));
            }
        }

        // 3. 親子関係を設定
        foreach (var (parentId, childId, quantity) in childRelations)
        {
            if (partLookup.TryGetValue(parentId, out var parent) && partLookup.TryGetValue(childId, out var child))
            {
                child.Parent = parent;
                child.Level = parent.Level + 1;
                child.Quantity = quantity; // 親子関係の数量で上書き
                
                parent.Children.Add(child);
                parent.HasChildren = true;
                parent.ChildrenLoaded = true;
                parent.IsUnit = true; // 子部品を持つ場合はユニット扱い
            }
        }

        // 4. 最上位部品のみを階層データに設定（親を持たない部品）
        hierarchyParts = partLookup.Values.Where(p => p.Parent == null).ToList();
    }

    private string GetStringFromJsonElement(JsonElement element, string propertyName)
    {
        if (element.TryGetProperty(propertyName, out var prop) && prop.ValueKind != JsonValueKind.Null)
        {
            return prop.GetString() ?? "";
        }
        return "";
    }

    private int GetIntFromJsonElement(JsonElement element, string propertyName)
    {
        if (element.TryGetProperty(propertyName, out var prop) && prop.ValueKind != JsonValueKind.Null)
        {
            if (prop.ValueKind == JsonValueKind.Number)
            {
                return prop.GetInt32();
            }
            if (int.TryParse(prop.GetString(), out int result))
            {
                return result;
            }
        }
        return 1; // デフォルト値
    }
    
    private async Task LoadChildParts(PartNode node)
    {
        // 子部品の遅延読み込み（APIから取得）
        // 現在はサンプルデータなので、既に読み込み済み
        await Task.Delay(100);
        node.ChildrenLoaded = true;
    }
    
    private void SortChildrenRecursively(List<PartNode> nodes)
    {
        foreach (var node in nodes)
        {
            if (node.HasChildren && node.Children.Count > 0)
            {
                node.Children = node.Children.OrderBy(c => c.PartNumber).ToList();
                SortChildrenRecursively(node.Children);
            }
        }
    }
} 