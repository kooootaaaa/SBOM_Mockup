@page "/machine/{MachineId}/parts"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Rendering
@using System.Collections.Generic
@using System.Linq
@using System.Text.Json
@using SBOMSystemMockup.Models
@using SBOMSystemMockup.Components
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>個体部品一覧</PageTitle>

<style>
    .compact-info {
        margin-bottom: 0.5rem;
    }
    
    .info-label {
        font-weight: 600;
        color: #495057;
        font-size: 0.8rem;
        margin-bottom: 0.125rem;
    }
    
    .info-value {
        font-weight: 600;
        color: #212529;
        font-size: 0.9rem;
    }
    
    .option-group {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 6px;
        padding: 0.75rem;
    }
    
    .btn-compact {
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
    }
    
    .btn-modern-primary {
        background: #0d6efd;
        border: 1px solid #0d6efd;
        color: white;
        border-radius: 4px;
        padding: 0.5rem 1rem;
        font-weight: 600;
        transition: all 0.2s ease;
    }
    
    .btn-modern-primary:hover {
        background: #0b5ed7;
        border-color: #0a58ca;
        color: white;
    }
    
    .btn-modern-secondary {
        background: #6c757d;
        border: 1px solid #6c757d;
        color: white;
        border-radius: 4px;
        padding: 0.5rem 1rem;
        font-weight: 600;
        transition: all 0.2s ease;
    }
    
    .btn-modern-secondary:hover {
        background: #5c636a;
        border-color: #565e64;
        color: white;
    }
    
    .cursor-pointer {
        cursor: pointer;
        user-select: none;
    }
    
    .cursor-pointer:hover {
        color: #0d6efd;
    }
    
    .child-part {
        background-color: #f8f9fa;
    }
    
    .child-part td {
        border-left: 3px solid #dee2e6;
    }
    
    tr.child-part:hover {
        background-color: #e9ecef !important;
    }
    
    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
        border-width: 0.2em;
    }
</style>

<!-- Header Section -->
<div class="mb-2 pb-2 border-bottom border-2">
    <h1 class="h3 mb-0 text-primary fw-bold">個体部品一覧 <small class="text-muted fs-6">（画面No.3 - PartsList.razor）</small></h1>
</div>

@if (isLoading)
{
    <div class="text-center p-4">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">読み込み中...</span>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-warning">
        @errorMessage
    </div>
}

<div class="card shadow-sm mb-3">
    <div class="card-header bg-light border-0 py-2">
        <h6 class="mb-0 text-secondary fw-semibold small">機械情報</h6>
    </div>
    <div class="card-body py-3">
        <div class="row g-2">
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">製造番号</label>
                    <div class="info-value">@(serialNumber ?? MachineId)</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">型式</label>
                    <div class="info-value">@(model ?? "")</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="compact-info">
                    <label class="info-label">機種名</label>
                    <div class="info-value">@(typeName ?? "")</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">完成日</label>
                    <div class="info-value">@(completionDate ?? "")</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">現在地</label>
                    <div class="info-value">@(location ?? "")</div>
                </div>
            </div>
            <div class="col-md-1">
                <div class="compact-info">
                    <label class="info-label">機械状態</label>
                    <div class="info-value">@(status ?? "")</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">管理区分</label>
                    <div class="info-value">@(managementType ?? "")</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">案件番号</label>
                    <div class="info-value">@(projectNo ?? "")</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="compact-info">
                    <label class="info-label">ロット番号</label>
                    <div class="info-value">@(lotNo ?? "")</div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="card shadow-sm mb-3">
    <div class="card-header bg-light border-0 py-2">
        <h6 class="mb-0 text-secondary fw-semibold small">
            <i class="bi bi-list-ul me-1"></i>個体部品一覧
        </h6>
    </div>
    <div class="card-body py-3">
        <div class="d-flex align-items-center flex-wrap gap-3">
            <div class="option-group">
                <label class="mb-0"><input type="radio" name="viewMode" value="hierarchy" checked @onchange="@(() => ChangeDisplayMode(PartsDisplayMode.Hierarchy))" /> 階層表示</label>
                <label class="mb-0 ms-3"><input type="radio" name="viewMode" value="summary" @onchange="@(() => ChangeDisplayMode(PartsDisplayMode.Summary))" /> 集計表示</label>
            </div>
            <button class="btn btn-success btn-compact" @onclick="TogglePartsDisplay">部品表示</button>
            <button class="btn btn-modern-primary btn-compact" @onclick="@(() => NavTo($"/machine/{MachineId}/partsfetch"))">部品情報取得画面を開く</button>
            <button class="btn btn-modern-primary btn-compact" @onclick="@(() => NavTo($"/machine/{MachineId}/partschange"))">部品変更画面を開く</button>
            <button class="btn btn-modern-primary btn-compact" @onclick="@(() => NavTo($"/machine/{MachineId}/setedit"))">セット品登録編集画面を開く</button>
            <button class="btn btn-modern-secondary btn-compact" @onclick="@(() => Nav.NavigateTo($"/machine/{MachineId}"))">閉じる</button>
        </div>
    </div>
</div>

@if (showParts && allParts.Count > 0)
{
    @if (currentDisplayMode == PartsDisplayMode.Hierarchy)
    {
        <div class="card shadow-sm">
            <div class="card-header bg-light border-0 py-2">
                <div class="d-flex justify-content-between align-items-center">
                    <h6 class="mb-0 text-secondary fw-semibold small">階層表示</h6>
                    <div class="d-flex align-items-center gap-2">
                        <!-- ページサイズ選択 -->
                        <div class="d-flex align-items-center gap-1">
                            <label class="form-label mb-0 small">表示件数:</label>
                            <select class="form-select form-select-sm" style="width: 80px;" @onchange="OnPageSizeChanged">
                                <option value="5" selected="@(pageSize == 5)">5件</option>
                                <option value="10" selected="@(pageSize == 10)">10件</option>
                                <option value="15" selected="@(pageSize == 15)">15件</option>
                                <option value="20" selected="@(pageSize == 20)">20件</option>
                                <option value="50" selected="@(pageSize == 50)">50件</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive" style="max-height: 600px;">
                    <table class="table table-hover table-sm mb-0">
                        <thead class="table-light sticky-top">
                            <tr>
                                <th style="width: 30px;"></th>
                                <th style="width: 50px;">階層</th>
                                <th>品番</th>
                                <th>品名</th>
                                <th>数量</th>
                                <th>メーカー</th>
                                <th>材質</th>
                                <th>型式</th>
                                <th>備考</th>
                                <th>ユニット種別</th>
                                <th>オプションFL</th>
                                <th>種別</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var part in GetCurrentPageParts())
                            {
                                @RenderPartRow(part)
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        
        <!-- ページネーション -->
        @if (totalPages > 1)
        {
            <nav aria-label="ページネーション" class="mt-3">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">前へ</button>
                    </li>
                    
                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                    {
                        int pageNumber = i;
                        <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                            <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                        </li>
                    }
                    
                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage == totalPages)">次へ</button>
                    </li>
                </ul>
            </nav>
            
            <div class="text-center mt-2">
                @((currentPage - 1) * pageSize + 1) - @(Math.Min(currentPage * pageSize, displayParts.Count)) / @displayParts.Count 件
            </div>
        }
    }
    else if (currentDisplayMode == PartsDisplayMode.Summary)
    {
        <PartsSummaryView 
            SummaryParts="summaryParts" 
            IsLoading="isPartsLoading"
            ShowActions="false"
            OnRefresh="LoadPartsData" />
    }
}


@code {
    [Parameter] public string? MachineId { get; set; }
    [Inject] NavigationManager Nav { get; set; } = default!;
    
    private bool showParts = false;
    private PartsDisplayMode currentDisplayMode = PartsDisplayMode.Hierarchy;
    
    // 画面4と同じ部品取得方式
    private List<Part> allParts = new List<Part>();
    private List<Part> displayParts = new List<Part>();
    private List<PartSummary> summaryParts = new List<PartSummary>();
    private bool isPartsLoading = false;
    
    // ページネーション
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)displayParts.Count / pageSize);
    
    // 機械情報を保持する変数
    private string? serialNumber;
    private string? model;
    private string? typeName;
    private string? completionDate;
    private string? location;
    private string? status;
    private string? managementType;
    private string? projectNo;
    private string? lotNo;
    
    private string apiBaseUrl = "http://localhost:5196/api";
    private bool isLoading = false;
    private string errorMessage = "";
    
    // 機種情報
    private int? selectedMachineTypeId = null;
    
    protected override async Task OnInitializedAsync()
    {
        // URLからクエリパラメータを取得
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = uri.Query;
        
        bool hasQueryParams = false;
        if (!string.IsNullOrEmpty(query))
        {
            var queryParams = ParseQueryString(query);
            
            serialNumber = GetQueryValue(queryParams, "serialno");
            model = GetQueryValue(queryParams, "model");
            typeName = GetQueryValue(queryParams, "typename");
            completionDate = GetQueryValue(queryParams, "completion");
            location = GetQueryValue(queryParams, "location");
            status = GetQueryValue(queryParams, "status");
            managementType = GetQueryValue(queryParams, "management");
            projectNo = GetQueryValue(queryParams, "projectno");
            lotNo = GetQueryValue(queryParams, "lotno");
            
            hasQueryParams = !string.IsNullOrEmpty(model) || !string.IsNullOrEmpty(typeName);
        }
        
        // URLパラメータがない場合はAPIから機械情報を取得
        if (!hasQueryParams && !string.IsNullOrEmpty(MachineId))
        {
            await LoadMachineDataFromApi();
        }
    }
    
    private Dictionary<string, string> ParseQueryString(string query)
    {
        var result = new Dictionary<string, string>();
        if (query.StartsWith("?"))
        {
            query = query.Substring(1);
        }
        
        var pairs = query.Split('&');
        foreach (var pair in pairs)
        {
            var keyValue = pair.Split('=');
            if (keyValue.Length == 2)
            {
                result[keyValue[0]] = keyValue[1];
            }
        }
        return result;
    }
    
    private string? GetQueryValue(Dictionary<string, string> queryParams, string key)
    {
        if (queryParams.TryGetValue(key, out var value))
        {
            return Uri.UnescapeDataString(value);
        }
        return null;
    }
    
    private async Task LoadMachineDataFromApi()
    {
        try
        {
            isLoading = true;
            var response = await Http.GetAsync($"{apiBaseUrl}/Machine/{MachineId}");
            
            if (response.IsSuccessStatusCode)
            {
                var jsonContent = await response.Content.ReadAsStringAsync();
                var data = JsonSerializer.Deserialize<Dictionary<string, object>>(jsonContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                if (data != null)
                {
                    serialNumber = GetStringValueFromApi(data, "製造番号");
                    model = GetStringValueFromApi(data, "型式");
                    typeName = GetStringValueFromApi(data, "機種名");
                    completionDate = GetDateValueFromApi(data, "完成日");
                    location = GetStringValueFromApi(data, "現所在地") ?? GetStringValueFromApi(data, "現在地");
                    status = GetStringValueFromApi(data, "機械状態");
                    managementType = GetStringValueFromApi(data, "管理区分");
                    projectNo = GetStringValueFromApi(data, "案件番号");
                    lotNo = GetStringValueFromApi(data, "ロット番号");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"APIエラー: {response.StatusCode}";
                Console.WriteLine($"APIエラー: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"データ取得エラー: {ex.Message}";
            Console.WriteLine($"データ取得エラー: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private string GetStringValueFromApi(Dictionary<string, object> data, string key)
    {
        if (data.TryGetValue(key, out var value))
        {
            return value?.ToString() ?? "";
        }
        return "";
    }
    
    private string? GetDateValueFromApi(Dictionary<string, object> data, string key)
    {
        if (data.TryGetValue(key, out var value) && value != null)
        {
            if (value is JsonElement element && element.ValueKind != JsonValueKind.Null)
            {
                if (DateTime.TryParse(element.GetString(), out DateTime date))
                {
                    return date.ToString("yyyy-MM-dd");
                }
            }
            if (DateTime.TryParse(value.ToString(), out DateTime parsedDate))
            {
                return parsedDate.ToString("yyyy-MM-dd");
            }
        }
        return null;
    }
    
    void NavTo(string url) => Nav.NavigateTo(url);
    
    private async Task TogglePartsDisplay()
    {
        showParts = !showParts;
        if (showParts && allParts.Count == 0)
        {
            // 画面4と同じ方式で部品データを読み込み
            await FetchPartsFromMachineSpec();
        }
        StateHasChanged();
    }
    
    private void ChangeDisplayMode(PartsDisplayMode newMode)
    {
        if (currentDisplayMode != newMode)
        {
            currentDisplayMode = newMode;
            if (allParts.Count > 0)
            {
                UpdateDisplayParts();
            }
        }
    }
    
    // T_個体部品サブとT_個体部品子部品サブから部品を取得
    private async Task FetchPartsFromMachineSpec()
    {
        try
        {
            isPartsLoading = true;
            errorMessage = "";
            
            if (string.IsNullOrEmpty(MachineId))
            {
                errorMessage = "機械IDが指定されていません。";
                return;
            }
            
            // T_個体部品サブから部品情報を取得
            var response = await Http.GetAsync($"{apiBaseUrl}/Parts/individual/{MachineId}");
            
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"APIレスポンス: {responseContent}");
                
                var result = JsonSerializer.Deserialize<Dictionary<string, object>>(responseContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                if (result != null && result.ContainsKey("parts"))
                {
                    var partsElement = (JsonElement)result["parts"];
                    allParts.Clear();
                    
                    foreach (var partElement in partsElement.EnumerateArray())
                    {
                        var unitType = GetIntFromJsonElement(partElement, "ユニット種別");
                        var optionUnitFlag = GetIntFromJsonElement(partElement, "オプションユニットFL");
                        
                        // デバッグ用ログ
                        var partNumber = GetStringFromJsonElement(partElement, "品番");
                        Console.WriteLine($"部品: {partNumber}, ユニット種別: {unitType}, オプションユニットFL: {optionUnitFlag}");
                        
                        var part = new Part
                        {
                            PartId = GetIntFromJsonElement(partElement, "部品ID"),
                            PartNumber = partNumber,
                            PartName = GetStringFromJsonElement(partElement, "品名"),
                            Quantity = Math.Max(1, GetIntFromJsonElement(partElement, "個数")),
                            Manufacturer = GetStringFromJsonElement(partElement, "メーカー"),
                            Material = GetStringFromJsonElement(partElement, "材質"),
                            Model = GetStringFromJsonElement(partElement, "型式"),
                            Remarks = GetStringFromJsonElement(partElement, "備考"),
                            UnitType = unitType,
                            OptionUnitFlag = optionUnitFlag,
                            IsUnit = unitType > 0,
                            IsOptionUnit = optionUnitFlag != 0, // 0以外（1または-1）をオプションとする
                            Level = 0  // 最上位は階層0
                        };
                        
                        Console.WriteLine($"  → IsUnit: {part.IsUnit}, IsOptionUnit: {part.IsOptionUnit}");
                        allParts.Add(part);
                    }
                    
                    // T_個体部品子部品サブから子部品関係を取得して設定
                    await LoadChildrenFromIndividualRelations(result);
                    UpdateDisplayParts();
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"部品取得エラー: {response.StatusCode} - {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"部品取得エラー: {ex.Message}";
        }
        finally
        {
            isPartsLoading = false;
        }
    }
    
    // T_個体部品子部品サブから子部品関係を設定
    private async Task LoadChildrenFromIndividualRelations(Dictionary<string, object> apiResponse)
    {
        await Task.Delay(1); // 非同期メソッドとするため
        
        if (apiResponse.TryGetValue("childRelations", out var childObj) && childObj is JsonElement childElement)
        {
            // 親部品IDごとにグループ化
            var childRelations = new Dictionary<string, List<JsonElement>>();
            
            foreach (var relationElement in childElement.EnumerateArray())
            {
                var parentId = GetStringFromJsonElement(relationElement, "親部品コード");
                if (!childRelations.ContainsKey(parentId))
                {
                    childRelations[parentId] = new List<JsonElement>();
                }
                childRelations[parentId].Add(relationElement);
            }
            
            // 各部品に子部品を設定
            foreach (var part in allParts)
            {
                if (childRelations.ContainsKey(part.PartId.ToString()))
                {
                    foreach (var relationElement in childRelations[part.PartId.ToString()])
                    {
                        var childUnitType = GetIntFromJsonElement(relationElement, "子ユニット種別");
                        var childOptionUnitFlag = GetIntFromJsonElement(relationElement, "子オプションユニットFL");
                        
                        var childPart = new Part
                        {
                            PartId = GetIntFromJsonElement(relationElement, "子部品コード"),
                            PartNumber = GetStringFromJsonElement(relationElement, "子品番"),
                            PartName = GetStringFromJsonElement(relationElement, "子品名"),
                            Quantity = Math.Max(1, GetIntFromJsonElement(relationElement, "個数")),
                            Manufacturer = GetStringFromJsonElement(relationElement, "子メーカー"),
                            Material = GetStringFromJsonElement(relationElement, "子材質"),
                            Model = GetStringFromJsonElement(relationElement, "子型式"),
                            Remarks = GetStringFromJsonElement(relationElement, "子備考"),
                            UnitType = childUnitType,
                            OptionUnitFlag = childOptionUnitFlag,
                            IsUnit = childUnitType > 0,
                            IsOptionUnit = childOptionUnitFlag != 0, // 0以外（1または-1）をオプションとする
                            Level = part.Level + 1,
                            Parent = part
                        };
                        part.Children.Add(childPart);
                    }
                    part.ChildrenLoaded = true;
                }
            }
        }
    }
    
    private int GetIntFromJsonElement(JsonElement element, string propertyName)
    {
        if (element.TryGetProperty(propertyName, out var prop) && prop.ValueKind != JsonValueKind.Null)
        {
            if (prop.ValueKind == JsonValueKind.Number)
            {
                return prop.GetInt32();
            }
            if (int.TryParse(prop.GetString(), out int result))
            {
                return result;
            }
        }
        // ユニット種別系は0をデフォルトに、個数系は1をデフォルトに
        if (propertyName.Contains("ユニット") || propertyName.Contains("オプション"))
        {
            return 0;
        }
        return 1;
    }
    
    private string GetStringFromJsonElement(JsonElement element, string propertyName)
    {
        if (element.TryGetProperty(propertyName, out var prop) && prop.ValueKind != JsonValueKind.Null)
        {
            return prop.GetString() ?? "";
        }
        return "";
    }
    
    private bool GetBoolFromJsonElement(JsonElement element, string propertyName)
    {
        if (element.TryGetProperty(propertyName, out var prop) && prop.ValueKind != JsonValueKind.Null)
        {
            if (prop.ValueKind == JsonValueKind.True || prop.ValueKind == JsonValueKind.False)
            {
                return prop.GetBoolean();
            }
            if (bool.TryParse(prop.GetString(), out bool result))
            {
                return result;
            }
        }
        return false;
    }
    
    private void UpdateDisplayParts()
    {
        if (currentDisplayMode == PartsDisplayMode.Hierarchy)
        {
            // 階層表示：展開された部品を含む線形リスト
            displayParts = GetLinearPartsForDisplay(allParts);
        }
        else
        {
            // 集計表示：最下位部品のみを集計（後で実装）
            summaryParts = new List<PartSummary>();
        }
        
        // 現在のページが有効範囲を超えている場合のみページをリセット
        var maxPage = (int)Math.Ceiling((double)displayParts.Count / pageSize);
        if (currentPage > maxPage && maxPage > 0)
        {
            currentPage = maxPage;
        }
        
        StateHasChanged();
    }
    
    private List<Part> GetLinearPartsForDisplay(List<Part> parts)
    {
        var result = new List<Part>();
        
        foreach (var part in parts.OrderBy(p => p.PartNumber))
        {
            result.Add(part);
            
            if (part.IsExpanded && part.Children.Count > 0)
            {
                result.AddRange(GetLinearPartsForDisplay(part.Children));
            }
        }
        
        return result;
    }
    
    private List<Part> GetCurrentPageParts()
    {
        var startIndex = (currentPage - 1) * pageSize;
        return displayParts.Skip(startIndex).Take(pageSize).ToList();
    }
    
    // 画面4と同じ展開/折りたたみロジック
    private async Task ToggleExpand(Part part)
    {
        if (!part.IsUnit)
            return;
        
        if (!part.ChildrenLoaded && !part.IsLoading)
        {
            // 子部品を初めて取得する場合
            await LoadChildParts(part);
        }
        else
        {
            // すでに取得済みの場合は展開状態を切り替え
            part.IsExpanded = !part.IsExpanded;
            UpdateDisplayParts();
        }
    }
    
    // 子部品を動的に取得（T_個体部品子部品サブから）
    private async Task LoadChildParts(Part part)
    {
        if (part.ChildrenLoaded || part.IsLoading)
            return;

        part.IsLoading = true;
        StateHasChanged();

        try
        {
            // 既に初期読み込み時に全ての子部品関係は読み込み済みなので、
            // ここではすでに設定されている子部品を表示するだけ
            part.IsExpanded = true;
            part.ChildrenLoaded = true;
            UpdateDisplayParts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"子部品読み込みエラー: {ex.Message}");
        }
        finally
        {
            part.IsLoading = false;
            StateHasChanged();
        }
    }
    
    private void OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newPageSize))
        {
            pageSize = newPageSize;
            currentPage = 1;
            StateHasChanged();
        }
    }
    
    private void GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }
    
    private async Task LoadPartsData()
    {
        await FetchPartsFromMachineSpec();
    }
    
    // 画面4と同じPartクラス
    public class Part
    {
        public int PartId { get; set; }
        public string PartNumber { get; set; } = "";
        public string PartName { get; set; } = "";
        public int Quantity { get; set; }
        public string Manufacturer { get; set; } = "";
        public string Material { get; set; } = "";
        public string Model { get; set; } = "";
        public string Remarks { get; set; } = "";
        public bool IsUnit { get; set; }
        public bool IsOptionUnit { get; set; }
        
        // デバッグ用：元の値を保持
        public int UnitType { get; set; }
        public int OptionUnitFlag { get; set; }
        
        // ツリー表示用の追加プロパティ
        public List<Part> Children { get; set; } = new List<Part>();
        public bool IsExpanded { get; set; } = false;
        public bool IsLoading { get; set; } = false;
        public bool ChildrenLoaded { get; set; } = false;
        public int Level { get; set; } = 0;
        public Part? Parent { get; set; } = null;
    }
    
    // 画面4と同じRenderPartRowメソッド
    private RenderFragment RenderPartRow(Part part) => builder =>
    {
        // 行の開始
        builder.OpenElement(0, "tr");
        builder.AddAttribute(1, "class", part.Level > 0 ? "child-part" : "");
        
        // 展開/折りたたみアイコン列
        builder.OpenElement(2, "td");
        builder.AddAttribute(3, "style", $"padding-left: {part.Level * 20}px;");
        
        if (part.IsUnit)
        {
            builder.OpenElement(4, "span");
            builder.AddAttribute(5, "class", "cursor-pointer");
            builder.AddAttribute(6, "onclick", EventCallback.Factory.Create(this, () => ToggleExpand(part)));
            
            if (part.IsLoading)
            {
                builder.OpenElement(7, "i");
                builder.AddAttribute(8, "class", "spinner-border spinner-border-sm");
                builder.CloseElement(); // spinner
            }
            else if (part.IsExpanded)
            {
                builder.AddContent(9, "▼");
            }
            else
            {
                builder.AddContent(10, "▶");
            }
            
            builder.CloseElement(); // span
        }
        
        builder.CloseElement(); // td
        
        // 階層番号
        builder.OpenElement(11, "td");
        builder.AddAttribute(12, "class", "text-center");
        builder.AddContent(13, (part.Level + 1).ToString());
        builder.CloseElement();
        
        // 品番
        builder.OpenElement(14, "td");
        builder.AddAttribute(15, "style", part.Level > 0 ? $"padding-left: {part.Level * 10}px;" : "");
        builder.AddContent(16, part.PartNumber);
        builder.CloseElement();
        
        // 品名
        builder.OpenElement(17, "td");
        builder.AddContent(18, part.PartName);
        builder.CloseElement();
        
        // 数量
        builder.OpenElement(19, "td");
        builder.AddAttribute(20, "class", "text-end");
        builder.AddContent(21, part.Quantity);
        builder.CloseElement();
        
        // メーカー
        builder.OpenElement(22, "td");
        builder.AddContent(23, part.Manufacturer);
        builder.CloseElement();
        
        // 材質
        builder.OpenElement(24, "td");
        builder.AddContent(25, part.Material);
        builder.CloseElement();
        
        // 型式
        builder.OpenElement(26, "td");
        builder.AddContent(27, part.Model);
        builder.CloseElement();
        
        // 備考
        builder.OpenElement(28, "td");
        builder.AddContent(29, part.Remarks);
        builder.CloseElement();
        
        // ユニット種別
        builder.OpenElement(30, "td");
        builder.AddAttribute(31, "class", "text-center");
        builder.AddContent(32, part.UnitType.ToString());
        builder.CloseElement();
        
        // オプションFL
        builder.OpenElement(33, "td");
        builder.AddAttribute(34, "class", "text-center");
        builder.AddContent(35, part.OptionUnitFlag.ToString());
        builder.CloseElement();
        
        // 種別
        builder.OpenElement(36, "td");
        if (part.IsOptionUnit)
        {
            builder.OpenElement(37, "span");
            builder.AddAttribute(38, "class", "badge bg-warning text-dark");
            builder.AddContent(39, "オプション");
            builder.CloseElement();
        }
        else if (part.IsUnit)
        {
            builder.OpenElement(40, "span");
            builder.AddAttribute(41, "class", "badge bg-info");
            builder.AddContent(42, "ユニット");
            builder.CloseElement();
        }
        else if (part.Children.Count > 0)
        {
            builder.OpenElement(43, "span");
            builder.AddAttribute(44, "class", "badge bg-secondary");
            builder.AddContent(45, "セット");
            builder.CloseElement();
        }
        else
        {
            builder.OpenElement(46, "span");
            builder.AddAttribute(47, "class", "badge bg-light text-dark");
            builder.AddContent(48, "部品");
            builder.CloseElement();
        }
        builder.CloseElement(); // td
        
        builder.CloseElement(); // tr
        
        // 子部品を再帰的にレンダリング
        if (part.IsExpanded && part.Children.Count > 0)
        {
            foreach (var child in part.Children)
            {
                builder.AddContent(37, RenderPartRow(child));
            }
        }
    };
}

