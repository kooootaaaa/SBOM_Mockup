@page "/machine/{MachineId}/partsfetch"
@using Microsoft.AspNetCore.Components
@using System.Collections.Generic
@using System.Linq
@using System.Text.Json
@using System.Net.Http.Json
@using SBOMSystemMockup.Models
@inject NavigationManager NavigationManager
@inject HttpClient Http
@implements IDisposable

<PageTitle>部品情報取得</PageTitle>

<style>
    .cursor-pointer {
        cursor: pointer;
        user-select: none;
    }
    
    .cursor-pointer:hover {
        color: #0d6efd;
    }
    
    .child-part {
        background-color: #f8f9fa;
    }
    
    .child-part td {
        border-left: 3px solid #dee2e6;
    }
    
    tr.child-part:hover {
        background-color: #e9ecef !important;
    }
    
    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
        border-width: 0.2em;
    }
    
    .btn-modern-primary {
        background: #0d6efd;
        border: 1px solid #0d6efd;
        color: white;
        border-radius: 4px;
        padding: 0.5rem 1rem;
        font-weight: 600;
        transition: all 0.2s ease;
    }
    
    .btn-modern-primary:hover {
        background: #0b5ed7;
        border-color: #0a58ca;
        color: white;
    }
    
    .btn-modern-secondary {
        background: #6c757d;
        border: 1px solid #6c757d;
        color: white;
        border-radius: 4px;
        padding: 0.5rem 1rem;
        font-weight: 600;
        transition: all 0.2s ease;
    }
    
    .btn-modern-secondary:hover {
        background: #5c636a;
        border-color: #565e64;
        color: white;
    }
</style>

<h3>部品情報取得 <small class="text-muted">（画面No.4 - PartsFetch.razor）</small></h3>

@if (isLoading)
{
    <div class="text-center p-4">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">読み込み中...</span>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-warning">
        @errorMessage
    </div>
}

<div class="mb-3">
    <label>型式: <input class="form-control d-inline" style="width: 280px;" @bind="model" @bind:event="oninput" @onchange="OnModelChanged" /></label>
    <label class="ms-3">日付: <input type="date" class="form-control d-inline w-auto" value="@completionDate" @onchange="@((ChangeEventArgs e) => completionDate = e.Value?.ToString() ?? "")" /></label>
    @if (showMachineSearchButton)
    {
        <button class="btn btn-modern-primary ms-3" @onclick="SearchMachineType" disabled="@(string.IsNullOrEmpty(model) || isLoading)">機種検索</button>
    }
    @if (isAutoSearching)
    {
        <span class="ms-3 text-muted">
            <div class="spinner-border spinner-border-sm me-2" role="status"></div>
            機種検索中...
        </span>
    }
    <button class="btn btn-modern-primary ms-3" @onclick="FetchParts" disabled="@(selectedMachineTypeId == null || string.IsNullOrEmpty(completionDate) || isLoading)">部品情報取得</button>
    <button class="btn btn-modern-primary ms-3" @onclick="RegisterParts">取得結果登録</button>
    <a class="btn btn-modern-secondary ms-3" href="/machine/@MachineId/parts">閉じる</a>
</div>

<!-- 機種選択モーダル -->
@if (showMachineTypeSelection && machineTypes.Count > 1)
{
    <div class="modal show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">機種選択</h5>
                </div>
                <div class="modal-body">
                    <p>複数の機種が見つかりました。選択してください。</p>
                    @foreach (var machineType in machineTypes)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="machineType" value="@machineType.Id" @onchange="@(() => selectedMachineTypeId = machineType.Id)" />
                            <label class="form-check-label">
                                @machineType.Name
                            </label>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelMachineTypeSelection">キャンセル</button>
                    <button type="button" class="btn btn-modern-primary" @onclick="ConfirmMachineTypeSelection" disabled="@(selectedMachineTypeId == null)">確定</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- 選択された機種の表示 -->
@if (selectedMachineType != null)
{
    <div class="alert alert-info">
        <strong>選択された機種:</strong> @selectedMachineType.Name
    </div>
}

<!-- オプションユニット選択モーダル -->
@if (showOptionSelection && optionParts.Count > 0)
{
    <div class="modal show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">オプションユニット選択</h5>
                </div>
                <div class="modal-body">
                    <p>この機種に含まれるオプションユニットです。実際に使用するものを選択してください。</p>
                    <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                        <table class="table table-sm table-bordered">
                            <thead class="sticky-top bg-light">
                                <tr>
                                    <th style="width: 50px;">選択</th>
                                    <th>品番</th>
                                    <th>品名</th>
                                    <th>数量</th>
                                    <th>メーカー</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var option in optionParts)
                                {
                                    <tr>
                                        <td class="text-center">
                                            <input type="checkbox" class="form-check-input" 
                                                   checked="@selectedOptionParts.Contains(option.PartNumber)"
                                                   @onchange="@((ChangeEventArgs e) => ToggleOptionPart(option.PartNumber, e.Value?.ToString() == "True"))" />
                                        </td>
                                        <td>@option.PartNumber</td>
                                        <td>@option.PartName</td>
                                        <td class="text-end">@option.Quantity</td>
                                        <td>@option.Manufacturer</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="mt-3">
                        <strong>選択されたオプション: @selectedOptionParts.Count 件</strong>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-modern-primary" @onclick="ConfirmOptionSelection">確定</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showResults)
{
    <div class="mb-3">
        @if (allParts.Count > 0)
        {
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5>取得結果 (@totalRecords 件)</h5>
                <div class="d-flex align-items-center">
                    <label class="me-2">表示件数:</label>
                    <select class="form-select w-auto" value="@pageSize" @onchange="OnPageSizeChanged">
                        <option value="5">5件</option>
                        <option value="10">10件</option>
                        <option value="20">20件</option>
                        <option value="50">50件</option>
                    </select>
                </div>
            </div>
            
            <table class="table table-bordered table-hover">
                <thead class="table-light">
                    <tr>
                        <th style="width: 30px;"></th>
                        <th style="width: 50px;">階層</th>
                        <th>品番</th>
                        <th>品名</th>
                        <th>数量</th>
                        <th>メーカー</th>
                        <th>材質</th>
                        <th>型式</th>
                        <th>備考</th>
                        <th>種別</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var part in GetCurrentPageParts())
                    {
                        @RenderPartRow(part)
                    }
                </tbody>
            </table>
            
            <!-- ページネーション -->
            @if (totalPages > 1)
            {
                <nav aria-label="ページネーション">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">前へ</button>
                        </li>
                        
                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                        {
                            int pageNumber = i; // ローカル変数にコピーして変数キャプチャの問題を回避
                            <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                            </li>
                        }
                        
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage == totalPages)">次へ</button>
                        </li>
                    </ul>
                </nav>
                
                <div class="text-center mt-2">
                    @((currentPage - 1) * pageSize + 1) - @(Math.Min(currentPage * pageSize, totalRecords)) / @totalRecords 件
                </div>
            }
        }
        else
        {
            <p class="text-muted">取得結果がありません。</p>
        }
    </div>
}

@if (!string.IsNullOrEmpty(registerSuccessMessage))
{
    <div class="alert alert-success mt-3">
        @registerSuccessMessage
        <button type="button" class="btn-close float-end" @onclick="ClearSuccessMessage"></button>
    </div>
}

<!-- 登録確認モーダル -->
<div class="modal fade @(showRegisterConfirmModal ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">部品構成登録確認</h5>
                <button type="button" class="btn-close" @onclick="CancelRegistration" disabled="@isRegisterProcessing"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-body text-center">
                                <h6 class="card-title">最上位部品</h6>
                                <h4 class="text-primary">@totalPartsCount 件</h4>
                                <small class="text-muted">機械に直接取り付けられる部品</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-body text-center">
                                <h6 class="card-title">親子関係</h6>
                                <h4 class="text-info">@totalChildRelationsCount 件</h4>
                                <small class="text-muted">セット品の階層構造</small>
                            </div>
                        </div>
                    </div>
                </div>

                @if (directPartsForRegistration.Count > 0)
                {
                    <h6>登録対象の最上位部品:</h6>
                    <div class="table-responsive mb-3" style="max-height: 200px; overflow-y: auto;">
                        <table class="table table-sm table-striped">
                            <thead>
                                <tr>
                                    <th>品番</th>
                                    <th>品名</th>
                                    <th>数量</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var part in directPartsForRegistration)
                                {
                                    var partInfo = GetPartInfo(part.PartId);
                                    <tr>
                                        <td>@partInfo.PartNumber</td>
                                        <td>@partInfo.PartName</td>
                                        <td>@part.Quantity</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }

                @if (childRelationsForRegistration.Count > 0)
                {
                    <h6>登録対象の親子関係（最初の10件）:</h6>
                    <div class="table-responsive mb-3" style="max-height: 200px; overflow-y: auto;">
                        <table class="table table-sm table-striped">
                            <thead>
                                <tr>
                                    <th>親部品（品番）</th>
                                    <th>親部品（品名）</th>
                                    <th>子部品（品番）</th>
                                    <th>子部品（品名）</th>
                                    <th>数量</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var relation in childRelationsForRegistration.Take(10))
                                {
                                    var parentInfo = GetPartInfo(relation.ParentPartCode);
                                    var childInfo = GetPartInfo(relation.ChildPartCode);
                                    <tr>
                                        <td>@parentInfo.PartNumber</td>
                                        <td>@parentInfo.PartName</td>
                                        <td>@childInfo.PartNumber</td>
                                        <td>@childInfo.PartName</td>
                                        <td>@relation.Quantity</td>
                                    </tr>
                                }
                                @if (childRelationsForRegistration.Count > 10)
                                {
                                    <tr>
                                        <td colspan="5" class="text-muted text-center">...他 @(childRelationsForRegistration.Count - 10) 件</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }

                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i>
                    この操作により、機械管理ID「@MachineId」の既存の個体部品構成が更新されます。
                </div>

                @if (!string.IsNullOrEmpty(registerErrorMessage))
                {
                    <div class="alert alert-danger">
                        @registerErrorMessage
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CancelRegistration" disabled="@isRegisterProcessing">
                    キャンセル
                </button>
                <button type="button" class="btn btn-primary" @onclick="ConfirmRegistration" disabled="@isRegisterProcessing">
                    @if (isRegisterProcessing)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    }
                    登録実行
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string? MachineId { get; set; }
    private bool showResults = false;
    
    // 機械情報を保持する変数
    private string model = "";
    private string completionDate = "";
    
    // 機種選択関連
    private List<MachineType> machineTypes = new List<MachineType>();
    private int? selectedMachineTypeId;
    private MachineType? selectedMachineType;
    private bool showMachineTypeSelection = false;
    
    private string apiBaseUrl = "http://localhost:5196/api";
    private bool isLoading = false;
    private string errorMessage = "";
    
    // ページネーション用変数
    private List<Part> allParts = new List<Part>();
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalRecords = 0;
    private int totalPages = 0;
    
    // オプションユニット選択用
    private HashSet<string> selectedOptionParts = new HashSet<string>();
    private bool showOptionSelection = false;
    private List<Part> optionParts = new List<Part>();
    
    // 自動検索用
    private bool showMachineSearchButton = true;
    private bool isAutoSearching = false;
    private System.Threading.Timer? debounceTimer;
    
    // 登録確認モーダル用
    private bool showRegisterConfirmModal = false;
    private bool isRegisterProcessing = false;
    private string registerErrorMessage = "";
    private string registerSuccessMessage = "";
    private int totalPartsCount = 0;
    private int totalChildRelationsCount = 0;
    
    // 登録データ
    private List<IndividualPartItem> directPartsForRegistration = new List<IndividualPartItem>();
    private List<IndividualPartChildItem> childRelationsForRegistration = new List<IndividualPartChildItem>();
    
    protected override async Task OnInitializedAsync()
    {
        // URLからクエリパラメータを取得
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = uri.Query;
        
        bool hasQueryParams = false;
        if (!string.IsNullOrEmpty(query))
        {
            var queryParams = ParseQueryString(query);
            
            model = GetQueryValue(queryParams, "model") ?? "";
            completionDate = GetQueryValue(queryParams, "completion") ?? "";
            
            hasQueryParams = !string.IsNullOrEmpty(model);
        }
        
        // URLパラメータがない場合はAPIから機械情報を取得
        if (!hasQueryParams && !string.IsNullOrEmpty(MachineId))
        {
            await LoadMachineDataFromApi();
        }
        
        // 初期化完了後、型式が設定されている場合は自動検索を実行
        if (!string.IsNullOrEmpty(model))
        {
            await AutoSearchMachineType();
        }
    }
    
    private Dictionary<string, string> ParseQueryString(string query)
    {
        var result = new Dictionary<string, string>();
        if (query.StartsWith("?"))
        {
            query = query.Substring(1);
        }
        
        var pairs = query.Split('&');
        foreach (var pair in pairs)
        {
            var keyValue = pair.Split('=');
            if (keyValue.Length == 2)
            {
                result[keyValue[0]] = keyValue[1];
            }
        }
        return result;
    }
    
    private string? GetQueryValue(Dictionary<string, string> queryParams, string key)
    {
        if (queryParams.TryGetValue(key, out var value))
        {
            return Uri.UnescapeDataString(value);
        }
        return null;
    }
    
    private async Task LoadMachineDataFromApi()
    {
        try
        {
            isLoading = true;
            var response = await Http.GetAsync($"{apiBaseUrl}/Machine/{MachineId}");
            
            if (response.IsSuccessStatusCode)
            {
                var jsonContent = await response.Content.ReadAsStringAsync();
                var data = JsonSerializer.Deserialize<Dictionary<string, object>>(jsonContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                if (data != null)
                {
                    model = GetStringValueFromApi(data, "型式") ?? "";
                    completionDate = GetDateValueFromApi(data, "完成日") ?? "";
                    
                    // 型式が取得できた場合は自動検索を実行
                    if (!string.IsNullOrEmpty(model))
                    {
                        await AutoSearchMachineType();
                    }
                }
            }
            else
            {
                errorMessage = $"APIエラー: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"データ取得エラー: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private string? GetStringValueFromApi(Dictionary<string, object> data, string key)
    {
        if (data.TryGetValue(key, out var value))
        {
            return value?.ToString();
        }
        return null;
    }
    
    private string? GetDateValueFromApi(Dictionary<string, object> data, string key)
    {
        if (data.TryGetValue(key, out var value) && value != null)
        {
            if (value is JsonElement element && element.ValueKind != JsonValueKind.Null)
            {
                if (DateTime.TryParse(element.GetString(), out DateTime date))
                {
                    return date.ToString("yyyy-MM-dd");
                }
            }
            if (DateTime.TryParse(value.ToString(), out DateTime parsedDate))
            {
                return parsedDate.ToString("yyyy-MM-dd");
            }
        }
        return null;
    }
    
    public class Part
    {
        public int PartId { get; set; }
        public string PartNumber { get; set; } = "";
        public string PartName { get; set; } = "";
        public int Quantity { get; set; }
        public string Manufacturer { get; set; } = "";
        public string Material { get; set; } = "";
        public string Model { get; set; } = "";
        public string Remarks { get; set; } = "";
        public bool IsUnit { get; set; }
        public bool IsOptionUnit { get; set; }
        
        // ツリー表示用の追加プロパティ
        public List<Part> Children { get; set; } = new List<Part>();
        public bool IsExpanded { get; set; } = false;
        public bool IsLoading { get; set; } = false;
        public bool ChildrenLoaded { get; set; } = false;
        public int Level { get; set; } = 0;
        public Part? Parent { get; set; } = null;
    }
    
    public class MachineType
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
    }
    
    private List<Part> fetchedParts = new List<Part>();
    
    private void OnModelChanged(ChangeEventArgs e)
    {
        model = e.Value?.ToString() ?? "";
        
        // debounceタイマーをリセット
        debounceTimer?.Dispose();
        
        if (string.IsNullOrEmpty(model.Trim()))
        {
            // 型式が空の場合は初期状態に戻す
            ResetMachineSelection();
            return;
        }
        
        // 500ms後に自動検索を実行
        debounceTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await AutoSearchMachineType();
                StateHasChanged();
            });
        }, null, 500, Timeout.Infinite);
    }
    
    private async Task AutoSearchMachineType()
    {
        if (string.IsNullOrEmpty(model.Trim()))
            return;
            
        try
        {
            isAutoSearching = true;
            errorMessage = "";
            ResetMachineSelection();
            
            var response = await Http.GetAsync($"{apiBaseUrl}/Machine/search-model/{Uri.EscapeDataString(model.Trim())}");
            
            if (response.IsSuccessStatusCode)
            {
                var jsonContent = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<Dictionary<string, object>>(jsonContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                if (result != null && result.ContainsKey("models"))
                {
                    var modelsElement = (JsonElement)result["models"];
                    machineTypes.Clear();
                    
                    foreach (var modelElement in modelsElement.EnumerateArray())
                    {
                        var machineType = new MachineType
                        {
                            Id = int.Parse(modelElement.GetProperty("機種ID").GetString() ?? "0"),
                            Name = modelElement.GetProperty("機種名").GetString() ?? ""
                        };
                        machineTypes.Add(machineType);
                    }
                    
                    if (machineTypes.Count == 0)
                    {
                        errorMessage = "該当する機種が見つかりませんでした。";
                        showMachineSearchButton = true;
                    }
                    else if (machineTypes.Count == 1)
                    {
                        // 1件のみの場合は自動選択し、機種検索ボタンを非表示
                        selectedMachineTypeId = machineTypes[0].Id;
                        selectedMachineType = machineTypes[0];
                        showMachineSearchButton = false;
                    }
                    else
                    {
                        // 複数件の場合は機種検索ボタンを表示
                        showMachineSearchButton = true;
                    }
                }
            }
            else
            {
                errorMessage = $"APIエラー: {response.StatusCode}";
                showMachineSearchButton = true;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"機種検索エラー: {ex.Message}";
            showMachineSearchButton = true;
        }
        finally
        {
            isAutoSearching = false;
        }
    }
    
    private async Task SearchMachineType()
    {
        if (string.IsNullOrEmpty(model.Trim()))
        {
            errorMessage = "型式を入力してください。";
            return;
        }
        
        try
        {
            isLoading = true;
            errorMessage = "";
            
            var response = await Http.GetAsync($"{apiBaseUrl}/Machine/search-model/{Uri.EscapeDataString(model.Trim())}");
            
            if (response.IsSuccessStatusCode)
            {
                var jsonContent = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<Dictionary<string, object>>(jsonContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                if (result != null && result.ContainsKey("models"))
                {
                    var modelsElement = (JsonElement)result["models"];
                    machineTypes.Clear();
                    
                    foreach (var modelElement in modelsElement.EnumerateArray())
                    {
                        var machineType = new MachineType
                        {
                            Id = int.Parse(modelElement.GetProperty("機種ID").GetString() ?? "0"),
                            Name = modelElement.GetProperty("機種名").GetString() ?? ""
                        };
                        machineTypes.Add(machineType);
                    }
                    
                    if (machineTypes.Count == 0)
                    {
                        errorMessage = "該当する機種が見つかりませんでした。";
                    }
                    else if (machineTypes.Count == 1)
                    {
                        // 1件のみの場合は自動選択
                        selectedMachineTypeId = machineTypes[0].Id;
                        selectedMachineType = machineTypes[0];
                        showMachineSearchButton = false;
                    }
                    else
                    {
                        // 複数件の場合は選択モーダルを表示
                        showMachineTypeSelection = true;
                    }
                }
            }
            else
            {
                errorMessage = $"APIエラー: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"機種検索エラー: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void ResetMachineSelection()
    {
        selectedMachineTypeId = null;
        selectedMachineType = null;
        showMachineTypeSelection = false;
        showMachineSearchButton = true;
        machineTypes.Clear();
    }
    
    private void ConfirmMachineTypeSelection()
    {
        selectedMachineType = machineTypes.FirstOrDefault(m => m.Id == selectedMachineTypeId);
        showMachineTypeSelection = false;
        showMachineSearchButton = false; // 選択後は機種検索ボタンを非表示
    }
    
    private void CancelMachineTypeSelection()
    {
        selectedMachineTypeId = null;
        selectedMachineType = null;
        showMachineTypeSelection = false;
        showMachineSearchButton = true; // キャンセル時は機種検索ボタンを表示
    }
    
    private async Task FetchParts()
    {
        if (selectedMachineTypeId == null || string.IsNullOrEmpty(completionDate))
        {
            errorMessage = "機種と日付を指定してください。";
            return;
        }
        
        try
        {
            isLoading = true;
            errorMessage = "";
            
            // 日付をyyyy-MM-ddフォーマットに変換
            var formattedDate = completionDate;
            if (DateTime.TryParse(completionDate, out DateTime parsedDate))
            {
                formattedDate = parsedDate.ToString("yyyy-MM-dd");
            }
            
            var requestData = new
            {
                MachineTypeId = selectedMachineTypeId.Value,
                TargetDate = formattedDate
            };
            
            var jsonContent = JsonSerializer.Serialize(requestData);
            var content = new StringContent(jsonContent, System.Text.Encoding.UTF8, "application/json");
            
            var response = await Http.PostAsync($"{apiBaseUrl}/Machine/fetch-parts", content);
            
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<Dictionary<string, object>>(responseContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                if (result != null && result.ContainsKey("parts"))
                {
                    var partsElement = (JsonElement)result["parts"];
                    allParts.Clear();
                    selectedOptionParts.Clear(); // 新しい検索時は選択をクリア
                    
                    foreach (var partElement in partsElement.EnumerateArray())
                    {
                        var part = new Part
                        {
                            PartId = GetIntFromJsonElement(partElement, "部品ID"),
                            PartNumber = partElement.GetProperty("品番").GetString() ?? "",
                            PartName = partElement.GetProperty("品名").GetString() ?? "",
                            Quantity = GetIntFromJsonElement(partElement, "個数"),
                            Manufacturer = partElement.GetProperty("メーカー").GetString() ?? "",
                            Material = partElement.GetProperty("材質").GetString() ?? "",
                            Model = partElement.GetProperty("型式").GetString() ?? "",
                            Remarks = partElement.GetProperty("備考").GetString() ?? "",
                            IsUnit = partElement.GetProperty("IsUnit").GetBoolean(),
                            IsOptionUnit = partElement.GetProperty("IsOptionUnit").GetBoolean()
                        };
                        allParts.Add(part);
                    }
                    
                    // オプションユニットを抽出
                    optionParts = allParts.Where(p => p.IsOptionUnit).ToList();
                    
                    if (optionParts.Count > 0)
                    {
                        // オプションユニットがある場合は選択モーダルを表示
                        showOptionSelection = true;
                        showResults = false;
                    }
                    else
                    {
                        // オプションユニットがない場合は結果を表示
                        UpdateDisplayParts();
                    }
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var errorResult = JsonSerializer.Deserialize<Dictionary<string, object>>(errorContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                    if (errorResult != null && errorResult.ContainsKey("error"))
                    {
                        errorMessage = $"APIエラー: {errorResult["error"]}";
                    }
                    else
                    {
                        errorMessage = $"APIエラー: {response.StatusCode} - {errorContent}";
                    }
                }
                catch
                {
                    errorMessage = $"APIエラー: {response.StatusCode} - {errorContent}";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"部品取得エラー: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private List<Part> displayParts = new List<Part>();
    
    private List<Part> GetCurrentPageParts()
    {
        var startIndex = (currentPage - 1) * pageSize;
        return displayParts.Skip(startIndex).Take(pageSize).ToList();
    }
    
    private void UpdateDisplayParts()
    {
        // オプションユニット以外 + 選択されたオプションユニットを表示
        displayParts = allParts.Where(p => !p.IsOptionUnit || selectedOptionParts.Contains(p.PartNumber)).ToList();
        totalRecords = displayParts.Count;
        totalPages = (int)Math.Ceiling((double)totalRecords / pageSize);
        currentPage = 1;
        showResults = true;
    }
    
    private void ConfirmOptionSelection()
    {
        showOptionSelection = false;
        UpdateDisplayParts();
    }
    
    private void GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }
    
    private void OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newPageSize))
        {
            pageSize = newPageSize;
            totalPages = (int)Math.Ceiling((double)totalRecords / pageSize);
            currentPage = 1; // ページサイズ変更時は1ページ目に戻る
        }
    }
    
    private void ToggleOptionPart(string partNumber, bool isChecked)
    {
        if (isChecked)
        {
            selectedOptionParts.Add(partNumber);
        }
        else
        {
            selectedOptionParts.Remove(partNumber);
        }
    }
    
    private async Task RegisterParts()
    {
        if (allParts.Count == 0)
        {
            errorMessage = "登録する部品がありません。";
            return;
        }

        showRegisterConfirmModal = true;
        
        // 登録データを準備
        await PrepareRegistrationData();
    }

    private async Task PrepareRegistrationData()
    {
        directPartsForRegistration.Clear();
        childRelationsForRegistration.Clear();
        
        var sequenceCounter = 1;
        var childSequenceCounter = 1;

        // 最上位部品（Level = 0）のみをT_個体部品サブ用に収集
        var topLevelParts = allParts.Where(p => p.Level == 0).ToList();
        foreach (var part in topLevelParts)
        {
            directPartsForRegistration.Add(new IndividualPartItem
            {
                PartId = part.PartId.ToString("D7"),
                Quantity = part.Quantity,
                SequenceNo = sequenceCounter++
            });
        }

        // まず、すべてのユニット・オプション部品の子部品を強制的に取得
        await LoadAllChildPartsForRegistration();
        
        // その後で親子関係を収集
        CollectAllChildRelations(ref childSequenceCounter);
        
        // 登録サマリーを更新
        totalPartsCount = directPartsForRegistration.Count;
        totalChildRelationsCount = childRelationsForRegistration.Count;
        
        Console.WriteLine($"最上位部品数: {totalPartsCount}, 親子関係数: {totalChildRelationsCount}");
    }

    private void CollectAllChildRelations(ref int sequenceCounter)
    {
        // allPartsを1つずつ確認し、子部品があるものをすべて収集
        foreach (var part in allParts)
        {
            if (part.Children != null && part.Children.Count > 0)
            {
                Console.WriteLine($"部品{part.PartId}に{part.Children.Count}個の子部品があります");
                
                foreach (var child in part.Children)
                {
                    var parentCode = part.PartId.ToString("D7");
                    var childCode = child.PartId.ToString("D7");
                    
                    childRelationsForRegistration.Add(new IndividualPartChildItem
                    {
                        ParentPartCode = parentCode,
                        ChildPartCode = childCode,
                        Quantity = child.Quantity,
                        SequenceNo = sequenceCounter++
                    });
                    
                    Console.WriteLine($"親子関係追加: {parentCode} -> {childCode} (数量: {child.Quantity})");
                }
            }
        }
    }

    private async Task LoadAllChildPartsForRegistration()
    {
        Console.WriteLine("すべてのユニット・オプション部品の子部品を取得開始");
        
        // ユニット・オプション部品で、まだ子部品が読み込まれていないものを探す
        var unloadedUnitParts = allParts.Where(p => p.IsUnit && !p.ChildrenLoaded).ToList();
        
        Console.WriteLine($"子部品未読み込みのユニット部品数: {unloadedUnitParts.Count}");
        
        foreach (var part in unloadedUnitParts)
        {
            Console.WriteLine($"部品{part.PartId}({part.PartNumber})の子部品を取得中...");
            
            try
            {
                var requestData = new
                {
                    ParentPartIds = new List<int> { part.PartId },
                    TargetDate = completionDate
                };
                
                var jsonContent = JsonSerializer.Serialize(requestData);
                var content = new StringContent(jsonContent, System.Text.Encoding.UTF8, "application/json");
                
                var response = await Http.PostAsync($"{apiBaseUrl}/Machine/parts-children", content);
                
                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var result = JsonSerializer.Deserialize<Dictionary<string, object>>(responseContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                    
                    if (result != null && result.ContainsKey("childParts"))
                    {
                        var childPartsElement = (JsonElement)result["childParts"];
                        
                        if (childPartsElement.TryGetProperty(part.PartId.ToString(), out var childrenElement))
                        {
                            part.Children.Clear();
                            
                            foreach (var childElement in childrenElement.EnumerateArray())
                            {
                                var childPart = new Part
                                {
                                    PartId = GetIntFromJsonElement(childElement, "部品ID"),
                                    PartNumber = childElement.GetProperty("品番").GetString() ?? "",
                                    PartName = childElement.GetProperty("品名").GetString() ?? "",
                                    Quantity = GetIntFromJsonElement(childElement, "個数") * part.Quantity,
                                    Manufacturer = childElement.GetProperty("メーカー").GetString() ?? "",
                                    Material = childElement.GetProperty("材質").GetString() ?? "",
                                    Model = childElement.GetProperty("型式").GetString() ?? "",
                                    Remarks = childElement.GetProperty("備考").GetString() ?? "",
                                    IsUnit = childElement.GetProperty("IsUnit").GetBoolean(),
                                    IsOptionUnit = childElement.GetProperty("IsOptionUnit").GetBoolean(),
                                    Level = part.Level + 1,
                                    Parent = part
                                };
                                
                                part.Children.Add(childPart);
                            }
                            
                            part.ChildrenLoaded = true;
                            Console.WriteLine($"部品{part.PartId}に{part.Children.Count}個の子部品を読み込み完了");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"部品{part.PartId}の子部品取得エラー: {ex.Message}");
            }
        }
        
        Console.WriteLine("すべてのユニット・オプション部品の子部品取得完了");
    }

    private async Task ConfirmRegistration()
    {
        isRegisterProcessing = true;
        registerErrorMessage = "";
        
        try
        {
            var requestData = new IndividualPartsRegisterRequest
            {
                MachineId = MachineId ?? "",
                DirectParts = directPartsForRegistration,
                ChildRelations = childRelationsForRegistration
            };

            var response = await Http.PostAsJsonAsync($"{apiBaseUrl}/Parts/register", requestData);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<IndividualPartsRegisterResponse>();
                if (result?.Success == true)
                {
                    registerSuccessMessage = $"登録完了: 部品{result.RegisteredPartsCount}件、親子関係{result.RegisteredChildRelationsCount}件を登録しました。";
                    showRegisterConfirmModal = false;
                }
                else
                {
                    registerErrorMessage = result?.Message ?? "登録に失敗しました。";
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                registerErrorMessage = $"登録エラー: {response.StatusCode} - {errorContent}";
            }
        }
        catch (Exception ex)
        {
            registerErrorMessage = $"登録処理中にエラーが発生しました: {ex.Message}";
        }
        finally
        {
            isRegisterProcessing = false;
        }
    }

    private void CancelRegistration()
    {
        showRegisterConfirmModal = false;
        registerErrorMessage = "";
    }

    private void ClearSuccessMessage()
    {
        registerSuccessMessage = "";
    }

    private (string PartNumber, string PartName) GetPartInfo(string partId)
    {
        // 7桁の0埋め文字列を数値に変換
        if (int.TryParse(partId, out int id))
        {
            // 全ての部品（階層化されたものも含む）から検索
            var part = FindPartInHierarchy(allParts, id);
            if (part != null)
            {
                return (part.PartNumber ?? "", part.PartName ?? "");
            }
        }
        return (partId, "部品情報不明");
    }

    private Part? FindPartInHierarchy(List<Part> parts, int partId)
    {
        foreach (var part in parts)
        {
            if (part.PartId == partId)
            {
                return part;
            }
            
            // 子部品も再帰的に検索
            var childPart = FindPartInHierarchy(part.Children, partId);
            if (childPart != null)
            {
                return childPart;
            }
        }
        return null;
    }
    
    // 部品行をレンダリングする再帰的メソッド
    private RenderFragment RenderPartRow(Part part) => builder =>
    {
        // 行の開始
        builder.OpenElement(0, "tr");
        builder.AddAttribute(1, "class", part.Level > 0 ? "child-part" : "");
        
        // 展開/折りたたみアイコン列
        builder.OpenElement(2, "td");
        builder.AddAttribute(3, "style", $"padding-left: {part.Level * 20}px;");
        
        if (part.IsUnit)
        {
            builder.OpenElement(4, "span");
            builder.AddAttribute(5, "class", "cursor-pointer");
            builder.AddAttribute(6, "onclick", EventCallback.Factory.Create(this, () => ToggleExpand(part)));
            
            if (part.IsLoading)
            {
                builder.OpenElement(7, "i");
                builder.AddAttribute(8, "class", "spinner-border spinner-border-sm");
                builder.CloseElement(); // spinner
            }
            else if (part.IsExpanded)
            {
                builder.AddContent(9, "▼");
            }
            else
            {
                builder.AddContent(10, "▶");
            }
            
            builder.CloseElement(); // span
        }
        
        builder.CloseElement(); // td
        
        // 階層番号
        builder.OpenElement(11, "td");
        builder.AddAttribute(12, "class", "text-center");
        builder.AddContent(13, (part.Level + 1).ToString());
        builder.CloseElement();
        
        // 品番
        builder.OpenElement(14, "td");
        builder.AddAttribute(15, "style", part.Level > 0 ? $"padding-left: {part.Level * 10}px;" : "");
        builder.AddContent(16, part.PartNumber);
        builder.CloseElement();
        
        // 品名
        builder.OpenElement(17, "td");
        builder.AddContent(18, part.PartName);
        builder.CloseElement();
        
        // 数量
        builder.OpenElement(19, "td");
        builder.AddAttribute(20, "class", "text-end");
        builder.AddContent(21, part.Quantity);
        builder.CloseElement();
        
        // メーカー
        builder.OpenElement(22, "td");
        builder.AddContent(23, part.Manufacturer);
        builder.CloseElement();
        
        // 材質
        builder.OpenElement(24, "td");
        builder.AddContent(25, part.Material);
        builder.CloseElement();
        
        // 型式
        builder.OpenElement(26, "td");
        builder.AddContent(27, part.Model);
        builder.CloseElement();
        
        // 備考
        builder.OpenElement(28, "td");
        builder.AddContent(29, part.Remarks);
        builder.CloseElement();
        
        // 種別
        builder.OpenElement(30, "td");
        if (part.IsUnit)
        {
            if (part.IsOptionUnit)
            {
                builder.OpenElement(31, "span");
                builder.AddAttribute(32, "class", "badge bg-warning text-dark");
                builder.AddContent(33, "オプション");
                builder.CloseElement();
            }
            else
            {
                builder.OpenElement(34, "span");
                builder.AddAttribute(35, "class", "badge bg-info");
                builder.AddContent(36, "ユニット");
                builder.CloseElement();
            }
        }
        builder.CloseElement(); // td
        
        builder.CloseElement(); // tr
        
        // 子部品を再帰的にレンダリング
        if (part.IsExpanded && part.Children.Count > 0)
        {
            foreach (var child in part.Children)
            {
                builder.AddContent(37, RenderPartRow(child));
            }
        }
    };
    
    // 展開/折りたたみの切り替え
    private async Task ToggleExpand(Part part)
    {
        if (!part.IsUnit)
            return;
        
        if (!part.ChildrenLoaded && !part.IsLoading)
        {
            // 子部品を初めて取得する場合
            await LoadChildParts(part);
        }
        else
        {
            // すでに取得済みの場合は展開状態を切り替え
            part.IsExpanded = !part.IsExpanded;
        }
    }
    
    // 子部品を取得
    private async Task LoadChildParts(Part part)
    {
        try
        {
            part.IsLoading = true;
            StateHasChanged();
            
            var requestData = new
            {
                ParentPartIds = new List<int> { part.PartId },
                TargetDate = completionDate
            };
            
            var jsonContent = JsonSerializer.Serialize(requestData);
            var content = new StringContent(jsonContent, System.Text.Encoding.UTF8, "application/json");
            
            var response = await Http.PostAsync($"{apiBaseUrl}/Machine/parts-children", content);
            
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<Dictionary<string, object>>(responseContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                if (result != null && result.ContainsKey("childParts"))
                {
                    var childPartsElement = (JsonElement)result["childParts"];
                    
                    // 親部品IDに対応する子部品を取得
                    if (childPartsElement.TryGetProperty(part.PartId.ToString(), out var childrenElement))
                    {
                        part.Children.Clear();
                        
                        foreach (var childElement in childrenElement.EnumerateArray())
                        {
                            var childPart = new Part
                            {
                                PartId = GetIntFromJsonElement(childElement, "部品ID"),
                                PartNumber = childElement.GetProperty("品番").GetString() ?? "",
                                PartName = childElement.GetProperty("品名").GetString() ?? "",
                                Quantity = GetIntFromJsonElement(childElement, "個数") * part.Quantity, // 親の数量を掛ける
                                Manufacturer = childElement.GetProperty("メーカー").GetString() ?? "",
                                Material = childElement.GetProperty("材質").GetString() ?? "",
                                Model = childElement.GetProperty("型式").GetString() ?? "",
                                Remarks = childElement.GetProperty("備考").GetString() ?? "",
                                IsUnit = childElement.GetProperty("IsUnit").GetBoolean(),
                                IsOptionUnit = childElement.GetProperty("IsOptionUnit").GetBoolean(),
                                Level = part.Level + 1,
                                Parent = part
                            };
                            
                            part.Children.Add(childPart);
                        }
                    }
                    
                    part.ChildrenLoaded = true;
                    part.IsExpanded = true;
                }
            }
            else
            {
                errorMessage = "子部品の取得に失敗しました。";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"子部品取得エラー: {ex.Message}";
        }
        finally
        {
            part.IsLoading = false;
            StateHasChanged();
        }
    }
    
    // JSONElementから整数値を安全に取得するヘルパーメソッド
    private int GetIntFromJsonElement(JsonElement element, string propertyName)
    {
        try
        {
            var property = element.GetProperty(propertyName);
            
            // 数値として取得を試みる
            if (property.ValueKind == JsonValueKind.Number)
            {
                return property.GetInt32();
            }
            
            // 文字列として取得して変換を試みる
            if (property.ValueKind == JsonValueKind.String)
            {
                if (int.TryParse(property.GetString(), out int result))
                {
                    return result;
                }
            }
            
            return 0;
        }
        catch
        {
            return 0;
        }
    }
    
    public void Dispose()
    {
        debounceTimer?.Dispose();
    }
} 