@page "/machine/{MachineId}"
@using System.Text.Json
@using System.Net.Http
@using System.Text
@inject HttpClient Http

<PageTitle>機械詳細 - @MachineId</PageTitle>

<h1>機械詳細 <small class="text-muted">（画面No.2 - MachineDetail.razor）</small></h1>

@if (isLoading)
{
    <div class="text-center p-4">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">読み込み中...</span>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}
else
{
<div class="border p-3 mb-3" style="background:#f8f9fa">
    <h5>＜個体情報＞</h5>
    <div class="row mb-2">
        <div class="col-md-2">
            <label>型式 <span class="text-danger">*</span></label>
            <input class="form-control @(string.IsNullOrWhiteSpace(machine.Model) && !string.IsNullOrEmpty(errorMessage) ? "is-invalid" : "")" @bind="machine.Model" required />
        </div>
        <div class="col-md-2">
            <label>枝番</label>
            <input class="form-control" @bind="machine.BranchNo" />
        </div>
        <div class="col-md-3">
            <label>機種名</label>
            <input class="form-control" @bind="machine.TypeName" />
        </div>
        <div class="col-md-2">
            <label>ロットNo.</label>
            <input class="form-control" @bind="machine.LotNo" />
        </div>
        <div class="col-md-2">
            <label>ロット連番</label>
            <input class="form-control" @bind="machine.LotSerial" />
        </div>
        <div class="col-md-2">
            <label>号機番号</label>
            <input class="form-control" @bind="machine.MachineNo" />
        </div>
        <div class="col-md-2">
            <label>案件番号</label>
            <input class="form-control" @bind="machine.ProjectNo" />
        </div>
        <div class="col-md-2">
            <label>中古案件番号</label>
            <input class="form-control" @bind="machine.UsedProjectNo" />
        </div>
        <div class="col-md-2">
            <label>取付タンク番号</label>
            <input class="form-control" @bind="machine.TankNo" />
        </div>
        <div class="col-md-2">
            <label>注文書識別番号</label>
            <input class="form-control" @bind="machine.OrderId" />
        </div>
        <div class="col-md-2">
            <label>預けNo.</label>
            <input class="form-control" @bind="machine.DepositNo" />
        </div>
        <div class="col-md-2">
            <label>製造番号</label>
            <input class="form-control" @bind="machine.Id" />
        </div>
        <div class="col-md-2">
            <label>河北製造番号</label>
            <input class="form-control" @bind="machine.KahokuId" />
        </div>
        <div class="col-md-2">
            <label>過去製造番号</label>
            <input class="form-control" @bind="machine.PastId" />
        </div>
        <div class="col-md-4">
            <label>社内メモ</label>
            <textarea class="form-control" @bind="machine.InternalMemo"></textarea>
        </div>
        <div class="col-md-6 d-flex align-items-end gap-4">
            <div>
                <input type="checkbox" class="form-check-input" @bind="machine.IsMasterOut" />
                <label class="form-check-label ms-1">マスタ外登録</label>
            </div>
            <div>
                <input type="checkbox" class="form-check-input" @bind="machine.IsDifficult" />
                <label class="form-check-label ms-1">難</label>
            </div>
            <div>
                <input type="checkbox" class="form-check-input" @bind="machine.IsNonStock" />
                <label class="form-check-label ms-1">非在庫品</label>
            </div>
        </div>
    </div>
</div>

<!-- タブ切替 -->
<ul class="nav nav-tabs mb-3">
    <li class="nav-item">
        <a class="nav-link @(activeTab==0 ? "active" : "")" href="#" @onclick="() => activeTab=0">製造情報</a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(activeTab==1 ? "active" : "")" href="#" @onclick="() => activeTab=1">出荷情報</a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(activeTab==2 ? "active" : "")" href="#" @onclick="() => activeTab=2">預け情報</a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(activeTab==3 ? "active" : "")" href="#" @onclick="() => activeTab=3">メンテナンス情報</a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(activeTab==4 ? "active" : "")" href="#" @onclick="() => activeTab=4">クレーム情報</a>
    </li>
</ul>
<div class="border p-3 mb-3" style="min-height:100px">
    @if (activeTab == 0)
    {
        <div class="row">
            <div class="col-md-2">
                <h6>＜基本情報＞</h6>
                <div class="row">
                    <div class="col-md-6">
                        <label>製造種別</label>
                        <input class="form-control mb-1" @bind="machine.ProductionType" />
                        <label>現在地</label>
                        <input class="form-control mb-1" @bind="machine.Location" />
                        <label>機械状態</label>
                        <input class="form-control mb-1" @bind="machine.Status" />
                        <label>管理区分</label>
                        <input class="form-control mb-1" @bind="machine.ManagementType" />
                    </div>
                    <div class="col-md-6">
                        <label>完成予定日</label>
                        <input type="date" class="form-control mb-1" @bind-value="machine.ScheduledDate" @bind-value:event="oninput" />
                        <label>仕掛品完成日</label>
                        <input type="date" class="form-control mb-1" @bind-value="machine.InProcessDate" @bind-value:event="oninput" />
                        <label>完成日</label>
                        <input type="date" class="form-control mb-1" @bind-value="machine.CompletionDate" @bind-value:event="oninput" />
                        <label>CR登録日</label>
                        <input type="date" class="form-control mb-1" @bind-value="machine.CRDate" @bind-value:event="oninput" />
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <h6>＜メーカーオプション＞</h6>
                <textarea class="form-control" rows="8" @bind="machine.MakerOption"></textarea>
            </div>
            <div class="col-md-2">
                <h6>＜客先仕様＞</h6>
                <textarea class="form-control" rows="8" @bind="machine.CustomerSpec"></textarea>
            </div>
            <div class="col-md-3">
                <h6>＜仕様変更履歴＞</h6>
                <textarea class="form-control mb-1" rows="5" @bind="machine.SpecHistory"></textarea>
                <h6>＜改造日＞</h6>
                <input type="date" class="form-control" @bind-value="machine.ModifyDate" @bind-value:event="oninput" />
            </div>
            <div class="col-md-3">
                <h6>＜組立指示書備考＞</h6>
                <textarea class="form-control mb-1" rows="3" @bind="machine.AssemblyNote"></textarea>
                <h6>＜改造内容＞</h6>
                <textarea class="form-control" rows="3" @bind="machine.ModifyContent"></textarea>
            </div>
        </div>
    }
    else if (activeTab == 1)
    {
        <div>出荷情報タブの内容（今後拡張）</div>
    }
    else if (activeTab == 2)
    {
        <div>預け情報タブの内容（今後拡張）</div>
    }
    else if (activeTab == 3)
    {
        <div>メンテナンス情報タブの内容（今後拡張）</div>
    }
    else if (activeTab == 4)
    {
        <div>クレーム情報タブの内容（今後拡張）</div>
    }
</div>

<div class="mt-4 text-end mb-4">
    <div class="d-flex justify-content-end gap-2">
        <button class="btn btn-primary d-flex align-items-center justify-content-center" style="width: 200px" @onclick="NavigateToPartsList">部品一覧画面を開く</button>
        <button class="btn btn-primary d-flex align-items-center justify-content-center" style="width: 200px" @onclick="OnRegister" disabled="@isLoading">@(isLoading ? "登録中..." : "登録")</button>
        <a href="/" class="btn btn-primary d-flex align-items-center justify-content-center" style="width: 200px">キャンセル</a>
    </div>
</div>
}

@code {
    [Parameter]
    public string? MachineId { get; set; }

    private int activeTab = 0;

    private Machine machine = new Machine();

    [Inject]
    private NavigationManager Nav { get; set; } = default!;

    private string apiBaseUrl = "http://localhost:5196/api";
    private bool isLoading = true;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadMachineData();
    }
    
    private async Task LoadMachineData()
    {
        try
        {
            isLoading = true;
            var response = await Http.GetAsync($"{apiBaseUrl}/Machine/{MachineId}");
            
            if (response.IsSuccessStatusCode)
            {
                var jsonContent = await response.Content.ReadAsStringAsync();
                var data = JsonSerializer.Deserialize<Dictionary<string, object>>(jsonContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                if (data != null)
                {
                    machine = new Machine
                    {
                        Id = GetStringValue(data, "製造番号"),
                        ManagementId = data.ContainsKey("機械管理ID") ? GetStringValue(data, "機械管理ID") : null,
                        Model = GetStringValue(data, "型式"),
                        BranchNo = GetStringValue(data, "ItemSubCode"),
                        TypeName = GetStringValue(data, "機種名"),
                        LotNo = GetStringValue(data, "ロット番号"),
                        LotSerial = GetStringValue(data, "ロット連番"),
                        MachineNo = GetStringValue(data, "号機番号"),
                        ProjectNo = GetStringValue(data, "案件番号"),
                        UsedProjectNo = GetStringValue(data, "中古番号"),
                        TankNo = GetStringValue(data, "タンク製造番号") ?? GetStringValue(data, "取付タンク番号"),
                        OrderId = GetStringValue(data, "OrderSerialNo"),
                        DepositNo = GetStringValue(data, "預けNo") ?? GetStringValue(data, "預けNo."),
                        KahokuId = GetStringValue(data, "河北製造番号"),
                        PastId = GetStringValue(data, "過去製造番号"),
                        InternalMemo = GetStringValue(data, "備考1"),
                        IsMasterOut = GetBoolValue(data, "マスタ外登録CH"),
                        IsDifficult = GetBoolValue(data, "傷有FLG"),
                        IsNonStock = GetBoolValue(data, "非在庫品FLG"),
                        ProductionType = GetStringValue(data, "製造種別"),
                        Location = GetStringValue(data, "現所在地") ?? GetStringValue(data, "現在地"),
                        Status = GetStringValue(data, "機械状態"),
                        ManagementType = GetStringValue(data, "管理区分"),
                        ScheduledDate = GetDateValue(data, "完成予定日"),
                        InProcessDate = GetDateValue(data, "仕掛品完成日"),
                        CompletionDate = GetDateValue(data, "完成日"),
                        CRDate = GetDateValue(data, "CR登録日"),
                        MakerOption = GetStringValue(data, "メーカーオプション"),
                        CustomerSpec = GetStringValue(data, "客先仕様"),
                        SpecHistory = GetStringValue(data, "仕様変更履歴"),
                        ModifyDate = GetDateValue(data, "改造日"),
                        AssemblyNote = GetStringValue(data, "製造時備考"),
                        ModifyContent = GetStringValue(data, "改造内容")
                    };
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var errorData = JsonSerializer.Deserialize<Dictionary<string, object>>(errorContent);
                    if (errorData != null && errorData.ContainsKey("error"))
                    {
                        errorMessage = $"APIエラー: {errorData["error"]}";
                    }
                    else
                    {
                        errorMessage = $"APIエラー: {response.StatusCode} - {errorContent}";
                    }
                }
                catch
                {
                    errorMessage = $"APIエラー: {response.StatusCode} - {errorContent}";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"データ取得エラー: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private string GetStringValue(Dictionary<string, object> data, string key)
    {
        if (data.TryGetValue(key, out var value))
        {
            return value?.ToString() ?? "";
        }
        return "";
    }
    
    private bool GetBoolValue(Dictionary<string, object> data, string key)
    {
        if (data.TryGetValue(key, out var value))
        {
            if (value is JsonElement element)
            {
                // smallint型の値を処理
                if (element.ValueKind == JsonValueKind.Number)
                {
                    return element.GetInt32() != 0;
                }
            }
            // 数値文字列の場合
            if (int.TryParse(value?.ToString(), out int intValue))
            {
                return intValue != 0;
            }
            // bool文字列の場合（念のため）
            if (bool.TryParse(value?.ToString(), out bool result))
            {
                return result;
            }
        }
        return false;
    }
    
    private DateTime? GetDateValue(Dictionary<string, object> data, string key)
    {
        if (data.TryGetValue(key, out var value) && value != null)
        {
            if (value is JsonElement element && element.ValueKind != JsonValueKind.Null)
            {
                return element.GetDateTime();
            }
            if (DateTime.TryParse(value.ToString(), out DateTime date))
            {
                return date;
            }
        }
        return null;
    }

    private async Task OnRegister()
    {
        // 型式の必須チェック
        if (string.IsNullOrWhiteSpace(machine.Model))
        {
            errorMessage = "型式は必須項目です。入力してください。";
            return;
        }
        
        try
        {
            isLoading = true;
            errorMessage = "";
            
            // 送信用のデータを準備
            var updateData = new Dictionary<string, object>
            {
                { "型式", machine.Model },
                { "ItemSubCode", machine.BranchNo },
                { "機種名", machine.TypeName },
                { "ロット番号", machine.LotNo },
                { "ロット連番", machine.LotSerial },
                { "号機番号", machine.MachineNo },
                { "案件番号", machine.ProjectNo },
                { "中古番号", machine.UsedProjectNo },
                { "タンク製造番号", machine.TankNo },
                { "OrderSerialNo", machine.OrderId },
                { "預けNo", machine.DepositNo },
                { "河北製造番号", machine.KahokuId },
                { "過去製造番号", machine.PastId },
                { "備考1", machine.InternalMemo },
                { "マスタ外登録CH", machine.IsMasterOut ? 1 : 0 },
                { "傷有FLG", machine.IsDifficult ? 1 : 0 },
                { "非在庫品FLG", machine.IsNonStock ? 1 : 0 },
                { "製造種別", machine.ProductionType },
                { "現所在地", machine.Location },
                { "機械状態", machine.Status },
                { "管理区分", machine.ManagementType },
                { "完成予定日", machine.ScheduledDate?.ToString("yyyy-MM-dd") ?? "" },
                { "仕掛品完成日", machine.InProcessDate?.ToString("yyyy-MM-dd") ?? "" },
                { "完成日", machine.CompletionDate?.ToString("yyyy-MM-dd") ?? "" },
                { "CR登録日", machine.CRDate?.ToString("yyyy-MM-dd") ?? "" },
                { "メーカーオプション", machine.MakerOption },
                { "客先仕様", machine.CustomerSpec },
                { "仕様変更履歴", machine.SpecHistory },
                { "改造日", machine.ModifyDate?.ToString("yyyy-MM-dd") ?? "" },
                { "製造時備考", machine.AssemblyNote },
                { "改造内容", machine.ModifyContent }
            };
            
            var jsonContent = JsonSerializer.Serialize(updateData);
            var content = new StringContent(jsonContent, System.Text.Encoding.UTF8, "application/json");
            
            var response = await Http.PutAsync($"{apiBaseUrl}/Machine/{MachineId}", content);
            
            if (response.IsSuccessStatusCode)
            {
                // 登録成功後、画面を閉じる（ホーム画面に遷移）
                Nav.NavigateTo("/");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var errorData = JsonSerializer.Deserialize<Dictionary<string, object>>(errorContent);
                    if (errorData != null && errorData.ContainsKey("error"))
                    {
                        errorMessage = $"登録エラー: {errorData["error"]}";
                    }
                    else
                    {
                        errorMessage = $"登録エラー: {response.StatusCode}";
                    }
                }
                catch
                {
                    errorMessage = $"登録エラー: {response.StatusCode} - {errorContent}";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"登録エラー: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToPartsList()
    {
        var queryParams = new Dictionary<string, string>
        {
            ["serialno"] = Uri.EscapeDataString(machine.Id ?? ""),
            ["model"] = Uri.EscapeDataString(machine.Model ?? ""),
            ["typename"] = Uri.EscapeDataString(machine.TypeName ?? ""),
            ["completion"] = machine.CompletionDate?.ToString("yyyy-MM-dd") ?? "",
            ["location"] = Uri.EscapeDataString(machine.Location ?? ""),
            ["status"] = Uri.EscapeDataString(machine.Status ?? ""),
            ["management"] = Uri.EscapeDataString(machine.ManagementType ?? ""),
            ["projectno"] = Uri.EscapeDataString(machine.ProjectNo ?? ""),
            ["lotno"] = Uri.EscapeDataString(machine.LotNo ?? "")
        };
        
        var queryString = string.Join("&", queryParams.Select(kv => $"{kv.Key}={kv.Value}"));
        // 機械管理IDがある場合はそれを使用、ない場合は製造番号を使用
        var machineIdParam = machine.ManagementId ?? MachineId;
        Nav.NavigateTo($"/machine/{machineIdParam}/parts?{queryString}");
    }

    public class Machine
    {
        public string Id { get; set; } = "";
        public string? ManagementId { get; set; }
        public string Model { get; set; } = "";
        public string BranchNo { get; set; } = "";
        public string TypeName { get; set; } = "";
        public string LotNo { get; set; } = "";
        public string LotSerial { get; set; } = "";
        public string MachineNo { get; set; } = "";
        public string ProjectNo { get; set; } = "";
        public string UsedProjectNo { get; set; } = "";
        public string TankNo { get; set; } = "";
        public string OrderId { get; set; } = "";
        public string DepositNo { get; set; } = "";
        public string KahokuId { get; set; } = "";
        public string PastId { get; set; } = "";
        public string InternalMemo { get; set; } = "";
        public bool IsMasterOut { get; set; }
        public string ProductionType { get; set; } = "";
        public string Location { get; set; } = "";
        public string Status { get; set; } = "";
        public string ManagementType { get; set; } = "";
        public DateTime? ScheduledDate { get; set; }
        public DateTime? InProcessDate { get; set; }
        public DateTime? CompletionDate { get; set; }
        public DateTime? CRDate { get; set; }
        public bool IsDifficult { get; set; }
        public bool IsNonStock { get; set; }
        public string MakerOption { get; set; } = "";
        public string CustomerSpec { get; set; } = "";
        public string SpecHistory { get; set; } = "";
        public DateTime? ModifyDate { get; set; }
        public string AssemblyNote { get; set; } = "";
        public string ModifyContent { get; set; } = "";
    }
} 