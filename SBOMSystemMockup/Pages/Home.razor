@page "/"
@using System.Text.Json
@inject HttpClient Http

<PageTitle>機械管理台帳</PageTitle>

<h1>機械管理台帳</h1>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        <strong>データベース接続エラー:</strong> @errorMessage
        <br/>現在はサンプルデータを表示しています。
    </div>
}

<div class="mb-3">
    <label class="me-2"><input type="checkbox" @bind="filterCompleted" /> 完成</label>
    <label class="me-2"><input type="checkbox" @bind="filterUnshipped" /> 未出荷</label>
    <label class="me-2"><input type="checkbox" @bind="filterInStock" /> 保留</label>
    <label class="me-2"><input type="checkbox" @bind="filterDemo" /> デモ機</label>
    <select class="form-select d-inline w-auto me-2" @bind="selectedSeries">
        <option value="">シリーズ選択</option>
        <option value="A">Aシリーズ</option>
        <option value="B">Bシリーズ</option>
    </select>
    <input class="form-control d-inline w-auto me-2" placeholder="型式" @bind="filterModel" />
    <input class="form-control d-inline w-auto me-2" placeholder="製造番号" @bind="filterId" />
    <button class="btn btn-primary me-2" @onclick="ApplyFilter">抽出実行</button>
    <button class="btn btn-secondary" @onclick="ClearFilter">解除</button>
</div>

<table class="table table-bordered table-sm">
    <thead>
        <tr>
            <th>製造番号</th>
            <th>型式</th>
            <th>機種名</th>
            <th>現在地</th>
            <th>機械状態</th>
            <th>河北製造番号</th>
            <th>過去製造番号</th>
            <th>ロット番号</th>
            <th>パレットNo.</th>
            <th>預けNo.</th>
            <th>仕様変更履歴</th>
            <th>管理区分</th>
            <th>状態</th>
            <th>メーカーオプション</th>
            <th>客先仕様</th>
            <th>業務連絡書</th>
            <th>製造時備考</th>
            <th>完成日</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var machine in filteredMachines)
        {
            <tr>
                <td>@machine.Id</td>
                <td>@machine.Model</td>
                <td>@machine.TypeName</td>
                <td>@machine.Location</td>
                <td>@machine.Status</td>
                <td>@machine.KahokuId</td>
                <td>@machine.PastId</td>
                <td>@machine.LotNo</td>
                <td>@machine.PalletNo</td>
                <td>@machine.DepositNo</td>
                <td>@machine.SpecHistory</td>
                <td>@machine.ManagementType</td>
                <td>@machine.State</td>
                <td>@machine.MakerOption</td>
                <td>@machine.CustomerSpec</td>
                <td>@machine.BusinessNote</td>
                <td>@machine.ManufactureNote</td>
                <td>@FormatCompletionDate(machine.CompletionDate)</td>
                <td>
                    <a href="@($"/machine/{machine.Id}")" class="btn btn-primary btn-sm">詳細表示</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (totalRecords > 0)
{
    <nav aria-label="ページネーション">
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">前へ</button>
            </li>
            
            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
            {
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                </li>
            }
            
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage == totalPages)">次へ</button>
            </li>
        </ul>
    </nav>
    
    <div class="text-center mt-2">
        @((currentPage - 1) * pageSize + 1) - @(Math.Min(currentPage * pageSize, totalRecords)) / @totalRecords 件
    </div>
}

@code {
    private List<Machine> machines = new();
    private List<Machine> filteredMachines = new();
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalRecords = 0;
    private int totalPages = 0;
    private string errorMessage = "";
    private string apiBaseUrl = "http://localhost:5196/api";

    // 抽出条件
    private bool filterCompleted;
    private bool filterUnshipped;
    private bool filterInStock;
    private bool filterDemo;
    private string selectedSeries = "";
    private string filterModel = "";
    private string filterId = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadMachinesFromDatabase();
    }

    private async Task LoadMachinesFromDatabase()
    {
        try
        {
            var response = await Http.GetAsync($"{apiBaseUrl}/Machine?page={currentPage}&pageSize={pageSize}");
            
            if (response.IsSuccessStatusCode)
            {
                var jsonContent = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<ApiResponse>(jsonContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                if (result != null)
                {
                    machines.Clear();
                    foreach (var machineData in result.Machines)
                    {
                        machines.Add(new Machine
                        {
                            Id = GetStringValue(machineData, "製造番号"),
                            CompletionDate = GetStringValue(machineData, "完成日"),
                            Model = GetStringValue(machineData, "型式"),
                            TypeName = GetStringValue(machineData, "機種名"),
                            Location = GetStringValue(machineData, "現所在地"),
                            Status = GetStringValue(machineData, "機械状態"),
                            KahokuId = GetStringValue(machineData, "河北製造番号"),
                            PastId = GetStringValue(machineData, "過去製造番号"),
                            LotNo = GetStringValue(machineData, "ロット番号"),
                            PalletNo = GetStringValue(machineData, "パレットNo"),
                            DepositNo = GetStringValue(machineData, "預けNo"),
                            SpecHistory = GetStringValue(machineData, "仕様変更履歴"),
                            ManagementType = GetStringValue(machineData, "管理区分"),
                            State = GetStringValue(machineData, "機械状態"),
                            MakerOption = GetStringValue(machineData, "メーカーオプション"),
                            CustomerSpec = GetStringValue(machineData, "客先仕様"),
                            BusinessNote = GetStringValue(machineData, "業務連絡書"),
                            ManufactureNote = GetStringValue(machineData, "製造時備考")
                        });
                    }
                    
                    totalRecords = result.TotalRecords;
                    totalPages = result.TotalPages;
                    errorMessage = ""; // 成功時はエラーメッセージをクリア
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                var errorResult = JsonSerializer.Deserialize<ErrorResponse>(errorContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                errorMessage = errorResult?.Error ?? "API呼び出しに失敗しました。";
                LoadSampleData();
            }
            
            filteredMachines = machines.ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"API接続エラー: {ex.Message}";
            Console.WriteLine($"API接続エラー: {ex.Message}");
            LoadSampleData();
        }
    }
    
    private string GetStringValue(Dictionary<string, object> data, string key)
    {
        if (data.TryGetValue(key, out var value))
        {
            return value?.ToString() ?? "";
        }
        return "";
    }
    
    private void LoadSampleData()
    {
        machines = new List<Machine>
        {
            new Machine { Id = "1510006", CompletionDate = "15-09-17", Model = "WTD-T16I", TypeName = "トルネードT16αR", Location = "本社", Status = "高荷重機", KahokuId = "", PastId = "22028829", LotNo = "", PalletNo = "", DepositNo = "", SpecHistory = "", ManagementType = "新品", State = "F-6", MakerOption = "クレーム返却後", CustomerSpec = "", BusinessNote = "", ManufactureNote = "" },
            new Machine { Id = "1205009", CompletionDate = "19-02-18", Model = "NF-410AD", TypeName = "グレートパンチSS2", Location = "本社", Status = "中古", KahokuId = "", PastId = "", LotNo = "", PalletNo = "", DepositNo = "", SpecHistory = "", ManagementType = "中古", State = "", MakerOption = "", CustomerSpec = "", BusinessNote = "", ManufactureNote = "" },
            new Machine { Id = "23030666", CompletionDate = "22-03-09", Model = "WM-PB-PS31ST-1", TypeName = "グレートパンチSS2", Location = "本社", Status = "新品", KahokuId = "", PastId = "231011084", LotNo = "", PalletNo = "", DepositNo = "", SpecHistory = "", ManagementType = "新品", State = "RE", MakerOption = "", CustomerSpec = "", BusinessNote = "", ManufactureNote = "" }
        };
        filteredMachines = machines.ToList();
        totalRecords = machines.Count;
        totalPages = (int)Math.Ceiling((double)totalRecords / pageSize);
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadMachinesFromDatabase();
        }
    }

    private async Task ApplyFilter()
    {
        currentPage = 1; // フィルタ適用時は1ページ目に戻る
        await LoadMachinesFromDatabase();
        
        filteredMachines = machines.Where(m =>
            (!filterCompleted || m.Status.Contains("新品")) &&
            (!filterUnshipped || m.Status.Contains("未出荷")) &&
            (!filterInStock || m.Status.Contains("保留")) &&
            (!filterDemo || m.Status.Contains("デモ")) &&
            (string.IsNullOrEmpty(selectedSeries) || m.Model.StartsWith(selectedSeries)) &&
            (string.IsNullOrEmpty(filterModel) || m.Model.Contains(filterModel)) &&
            (string.IsNullOrEmpty(filterId) || m.Id.Contains(filterId))
        ).ToList();
    }

    private async Task ClearFilter()
    {
        filterCompleted = false;
        filterUnshipped = false;
        filterInStock = false;
        filterDemo = false;
        selectedSeries = "";
        filterModel = "";
        filterId = "";
        currentPage = 1;
        await LoadMachinesFromDatabase();
    }

    public class Machine
    {
        public string Id { get; set; } = "";
        public string CompletionDate { get; set; } = "";
        public string Model { get; set; } = "";
        public string TypeName { get; set; } = "";
        public string Location { get; set; } = "";
        public string Status { get; set; } = "";
        public string KahokuId { get; set; } = "";
        public string PastId { get; set; } = "";
        public string LotNo { get; set; } = "";
        public string PalletNo { get; set; } = "";
        public string DepositNo { get; set; } = "";
        public string SpecHistory { get; set; } = "";
        public string ManagementType { get; set; } = "";
        public string State { get; set; } = "";
        public string MakerOption { get; set; } = "";
        public string CustomerSpec { get; set; } = "";
        public string BusinessNote { get; set; } = "";
        public string ManufactureNote { get; set; } = "";
    }
    
    public class ApiResponse
    {
        public List<Dictionary<string, object>> Machines { get; set; } = new();
        public int TotalRecords { get; set; }
        public int CurrentPage { get; set; }
        public int PageSize { get; set; }
        public int TotalPages { get; set; }
    }
    
    public class ErrorResponse
    {
        public string Error { get; set; } = "";
    }
    
    private string FormatCompletionDate(string dateString)
    {
        if (string.IsNullOrEmpty(dateString))
            return "";
            
        // データベースから取得した日付文字列をパースして yyyy/M/d 形式にフォーマット
        if (DateTime.TryParse(dateString, out DateTime date))
        {
            return date.ToString("yyyy/M/d");
        }
        
        return dateString; // パースできない場合は元の値を返す
    }
}
