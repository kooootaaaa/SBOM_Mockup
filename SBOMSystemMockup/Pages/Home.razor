@page "/"
@using System.Text.Json
@inject HttpClient Http

<PageTitle>機械管理台帳</PageTitle>

<!-- Header Section -->
<div class="d-flex justify-content-between align-items-center mb-2 pb-2 border-bottom border-2">
    <div>
        <h1 class="h3 mb-0 text-primary fw-bold">機械管理台帳 <small class="text-muted fs-6">（画面No.1 - Home.razor）</small></h1>
    </div>
    <div class="badge bg-light text-dark px-2 py-1">
        <i class="bi bi-server me-1"></i>総機械数: @(totalRecords)台
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-warning border-0 py-2 mb-2">
        <div class="d-flex align-items-center">
            <i class="bi bi-exclamation-triangle-fill text-warning me-2"></i>
            <small><strong>DB接続エラー:</strong> @errorMessage（サンプルデータ表示中）</small>
        </div>
    </div>
}

<!-- Filter Section -->
<div class="card shadow-sm mb-3">
    <div class="card-header bg-light border-0 py-2">
        <h6 class="mb-0 text-secondary fw-semibold small">
            <i class="bi bi-funnel me-1"></i>検索・絞り込み
        </h6>
    </div>
    <div class="card-body py-3">
        <!-- Status Filters -->
        <div class="row mb-2">
            <div class="col-12">
                <label class="text-muted small mb-1 d-block">機械状態</label>
                <div class="d-flex flex-wrap gap-2">
                    <div class="form-check form-check-inline">
                        <input class="form-check-input form-check-input-sm" type="checkbox" @bind="filterCompleted" id="filterCompleted">
                        <label class="form-check-label small" for="filterCompleted">完成</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input form-check-input-sm" type="checkbox" @bind="filterUnshipped" id="filterUnshipped">
                        <label class="form-check-label small" for="filterUnshipped">未出荷</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input form-check-input-sm" type="checkbox" @bind="filterInStock" id="filterInStock">
                        <label class="form-check-label small" for="filterInStock">保留</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input form-check-input-sm" type="checkbox" @bind="filterDemo" id="filterDemo">
                        <label class="form-check-label small" for="filterDemo">デモ機</label>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Search Inputs -->
        <div class="row g-2 mb-2">
            <div class="col-md-3">
                <label class="form-label text-muted small mb-1">シリーズ</label>
                <select class="form-select form-select-sm" @bind="selectedSeries">
                    <option value="">すべて</option>
                    <option value="A">Aシリーズ</option>
                    <option value="B">Bシリーズ</option>
                </select>
            </div>
            <div class="col-md-4">
                <label class="form-label text-muted small mb-1">型式</label>
                <input class="form-control form-control-sm" placeholder="型式名で検索..." @bind="filterModel" />
            </div>
            <div class="col-md-4">
                <label class="form-label text-muted small mb-1">製造番号</label>
                <input class="form-control form-control-sm" placeholder="製造番号で検索..." @bind="filterId" />
            </div>
        </div>
        
        <!-- Action Buttons -->
        <div class="d-flex gap-2">
            <button class="btn btn-primary btn-sm px-3" @onclick="ApplyFilter">
                <i class="bi bi-search me-1"></i>検索実行
            </button>
            <button class="btn btn-outline-secondary btn-sm" @onclick="ClearFilter">
                <i class="bi bi-arrow-clockwise me-1"></i>リセット
            </button>
        </div>
    </div>
</div>

<!-- Machine List -->
<div class="card shadow-sm">
    <div class="card-header bg-white border-0 py-2">
        <div class="d-flex justify-content-between align-items-center">
            <h6 class="mb-0 text-secondary fw-semibold small">
                <i class="bi bi-list-ul me-1"></i>機械一覧
            </h6>
            @if (totalRecords > 0)
            {
                <small class="text-muted">
                    @((currentPage - 1) * pageSize + 1) - @(Math.Min(currentPage * pageSize, totalRecords)) / @totalRecords 件表示
                </small>
            }
        </div>
    </div>
    <div class="table-responsive">
        <table class="table table-hover table-sm mb-0">
            <thead class="table-light">
                <tr>
                    <th class="border-0 py-2 text-muted small fw-semibold">製造番号</th>
                    <th class="border-0 py-2 text-muted small fw-semibold">型式</th>
                    <th class="border-0 py-2 text-muted small fw-semibold">機種名</th>
                    <th class="border-0 py-2 text-muted small fw-semibold">現在地</th>
                    <th class="border-0 py-2 text-muted small fw-semibold">状態</th>
                    <th class="border-0 py-2 text-muted small fw-semibold">預けNo.</th>
                    <th class="border-0 py-2 text-muted small fw-semibold">管理区分</th>
                    <th class="border-0 py-2 text-muted small fw-semibold">メーカーOP</th>
                    <th class="border-0 py-2 text-muted small fw-semibold">客先仕様</th>
                    <th class="border-0 py-2 text-muted small fw-semibold">完成日</th>
                    <th class="border-0 py-2 text-muted small fw-semibold text-center">操作</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var machine in filteredMachines)
                {
                    <tr class="border-bottom">
                        <td class="py-1 align-middle">
                            <span class="fw-medium text-dark small">@machine.Id</span>
                        </td>
                        <td class="py-1 align-middle">
                            <span class="badge bg-primary bg-opacity-10 text-primary small">@machine.Model</span>
                        </td>
                        <td class="py-1 align-middle" title="@machine.TypeName">
                            <div class="text-truncate small" style="max-width: 180px;">
                                @machine.TypeName
                            </div>
                        </td>
                        <td class="py-1 align-middle">
                            <i class="bi bi-geo-alt text-muted me-1"></i><span class="small">@machine.Location</span>
                        </td>
                        <td class="py-1 align-middle">
                            @{
                                var statusClass = machine.Status switch {
                                    var s when s.Contains("新品") => "success",
                                    var s when s.Contains("中古") => "warning",
                                    var s when s.Contains("未出荷") => "info",
                                    var s when s.Contains("保留") => "secondary",
                                    var s when s.Contains("デモ") => "primary",
                                    _ => "light"
                                };
                            }
                            <span class="badge bg-@statusClass bg-opacity-10 text-@statusClass small">@machine.Status</span>
                        </td>
                        <td class="py-1 align-middle text-muted small">@machine.DepositNo</td>
                        <td class="py-1 align-middle text-muted small">@machine.ManagementType</td>
                        <td class="py-1 align-middle" title="@machine.MakerOption">
                            <div class="text-truncate text-muted small" style="max-width: 100px;">
                                @machine.MakerOption
                            </div>
                        </td>
                        <td class="py-1 align-middle" title="@machine.CustomerSpec">
                            <div class="text-truncate text-muted small" style="max-width: 100px;">
                                @machine.CustomerSpec
                            </div>
                        </td>
                        <td class="py-1 align-middle text-muted small">
                            <i class="bi bi-calendar3 me-1"></i>@FormatCompletionDate(machine.CompletionDate)
                        </td>
                        <td class="py-1 align-middle text-center">
                            <a href="@($"/machine/{machine.ManagementId ?? machine.Id}")" class="btn btn-outline-primary btn-sm px-2 py-1">
                                <i class="bi bi-eye me-1"></i>詳細
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@if (totalRecords > 0)
{
    <div class="card-footer bg-light border-0 py-2">
        <div class="d-flex justify-content-center">
            <nav aria-label="ページネーション">
                <ul class="pagination pagination-sm mb-0">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button class="page-link border-0 px-2" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">
                            <i class="bi bi-chevron-left"></i>
                        </button>
                    </li>
                    
                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                    {
                        int pageNumber = i;
                        <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                            <button class="page-link border-0 px-2 @(pageNumber == currentPage ? "bg-primary text-white" : "text-primary")" @onclick="() => GoToPage(pageNumber)">
                                @pageNumber
                            </button>
                        </li>
                    }
                    
                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <button class="page-link border-0 px-2" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                            <i class="bi bi-chevron-right"></i>
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
}

@code {
    private List<Machine> machines = new();
    private List<Machine> filteredMachines = new();
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalRecords = 0;
    private int totalPages = 0;
    private string errorMessage = "";
    private string apiBaseUrl = "http://localhost:5196/api";

    // 抽出条件
    private bool filterCompleted;
    private bool filterUnshipped;
    private bool filterInStock;
    private bool filterDemo;
    private string selectedSeries = "";
    private string filterModel = "";
    private string filterId = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadMachinesFromDatabase();
    }

    private async Task LoadMachinesFromDatabase()
    {
        try
        {
            var response = await Http.GetAsync($"{apiBaseUrl}/Machine?page={currentPage}&pageSize={pageSize}");
            
            if (response.IsSuccessStatusCode)
            {
                var jsonContent = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<ApiResponse>(jsonContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                if (result != null)
                {
                    machines.Clear();
                    foreach (var machineData in result.Machines)
                    {
                        machines.Add(new Machine
                        {
                            Id = GetStringValue(machineData, "製造番号"),
                            ManagementId = GetNullableStringValue(machineData, "機械管理ID"),
                            CompletionDate = GetStringValue(machineData, "完成日"),
                            Model = GetStringValue(machineData, "型式"),
                            TypeName = GetStringValue(machineData, "機種名"),
                            Location = GetStringValue(machineData, "現所在地"),
                            Status = GetStringValue(machineData, "機械状態"),
                            DepositNo = GetStringValue(machineData, "預けNo"),
                            ManagementType = GetStringValue(machineData, "管理区分"),
                            MakerOption = GetStringValue(machineData, "メーカーオプション"),
                            CustomerSpec = GetStringValue(machineData, "客先仕様")
                        });
                    }
                    
                    totalRecords = result.TotalRecords;
                    totalPages = result.TotalPages;
                    errorMessage = ""; // 成功時はエラーメッセージをクリア
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                var errorResult = JsonSerializer.Deserialize<ErrorResponse>(errorContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                errorMessage = errorResult?.Error ?? "API呼び出しに失敗しました。";
                LoadSampleData();
            }
            
            filteredMachines = machines.ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"API接続エラー: {ex.Message}";
            Console.WriteLine($"API接続エラー: {ex.Message}");
            LoadSampleData();
        }
    }
    
    private string GetStringValue(Dictionary<string, object> data, string key)
    {
        if (data.TryGetValue(key, out var value))
        {
            return value?.ToString() ?? "";
        }
        return "";
    }
    
    private string? GetNullableStringValue(Dictionary<string, object> data, string key)
    {
        if (data.TryGetValue(key, out var value) && value != null)
        {
            var strValue = value.ToString();
            return string.IsNullOrEmpty(strValue) ? null : strValue;
        }
        return null;
    }
    
    private void LoadSampleData()
    {
        machines = new List<Machine>
        {
            new Machine { Id = "1510006", CompletionDate = "15-09-17", Model = "WTD-T16I", TypeName = "トルネードT16αR", Location = "本社", Status = "高荷重機", DepositNo = "", ManagementType = "新品", MakerOption = "クレーム返却後", CustomerSpec = "" },
            new Machine { Id = "1205009", CompletionDate = "19-02-18", Model = "NF-410AD", TypeName = "グレートパンチSS2", Location = "本社", Status = "中古", DepositNo = "", ManagementType = "中古", MakerOption = "", CustomerSpec = "" },
            new Machine { Id = "23030666", CompletionDate = "22-03-09", Model = "WM-PB-PS31ST-1", TypeName = "グレートパンチSS2", Location = "本社", Status = "新品", DepositNo = "", ManagementType = "新品", MakerOption = "", CustomerSpec = "" }
        };
        filteredMachines = machines.ToList();
        totalRecords = machines.Count;
        totalPages = (int)Math.Ceiling((double)totalRecords / pageSize);
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadMachinesFromDatabase();
        }
    }

    private async Task ApplyFilter()
    {
        currentPage = 1; // フィルタ適用時は1ページ目に戻る
        await LoadMachinesFromDatabase();
        
        filteredMachines = machines.Where(m =>
            (!filterCompleted || m.Status.Contains("新品")) &&
            (!filterUnshipped || m.Status.Contains("未出荷")) &&
            (!filterInStock || m.Status.Contains("保留")) &&
            (!filterDemo || m.Status.Contains("デモ")) &&
            (string.IsNullOrEmpty(selectedSeries) || m.Model.StartsWith(selectedSeries)) &&
            (string.IsNullOrEmpty(filterModel) || m.Model.Contains(filterModel)) &&
            (string.IsNullOrEmpty(filterId) || m.Id.Contains(filterId))
        ).ToList();
    }

    private async Task ClearFilter()
    {
        filterCompleted = false;
        filterUnshipped = false;
        filterInStock = false;
        filterDemo = false;
        selectedSeries = "";
        filterModel = "";
        filterId = "";
        currentPage = 1;
        await LoadMachinesFromDatabase();
    }

    public class Machine
    {
        public string Id { get; set; } = "";
        public string? ManagementId { get; set; }
        public string CompletionDate { get; set; } = "";
        public string Model { get; set; } = "";
        public string TypeName { get; set; } = "";
        public string Location { get; set; } = "";
        public string Status { get; set; } = "";
        public string DepositNo { get; set; } = "";
        public string ManagementType { get; set; } = "";
        public string MakerOption { get; set; } = "";
        public string CustomerSpec { get; set; } = "";
    }
    
    public class ApiResponse
    {
        public List<Dictionary<string, object>> Machines { get; set; } = new();
        public int TotalRecords { get; set; }
        public int CurrentPage { get; set; }
        public int PageSize { get; set; }
        public int TotalPages { get; set; }
    }
    
    public class ErrorResponse
    {
        public string Error { get; set; } = "";
    }
    
    private string FormatCompletionDate(string dateString)
    {
        if (string.IsNullOrEmpty(dateString))
            return "";
            
        // データベースから取得した日付文字列をパースして yyyy/M/d 形式にフォーマット
        if (DateTime.TryParse(dateString, out DateTime date))
        {
            return date.ToString("yyyy/M/d");
        }
        
        return dateString; // パースできない場合は元の値を返す
    }
}
